#! .desc:
# Save with single-quote escape an argument into a variable
#! .params:
# <"$1"> - argument
# <$2> - variable name
#! .uses.fn:
# <assert> ('-shell-name' '$2');
#          Assert a string
# [replchar_posix] ('\'' '\'\\\'\'' '$1');
#                  Replace a specific character with character(s) in a string
#                  using PE
#! .rc:
# (0) success
# (*) error
#! .rc.fn:
# (assert) (255) bad input
# (replchar_posix) (*) error
#! .desc.ext:
# For more information, refer to:
# > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell Command Language,
#   Subsection: Quoting".
#.
arg_save() {
    assert -shell-name "$2" || return 255

    # Escape any single quotes in the argument ($1).
    _str="$1"; case "$_str" in
        *\'*) replchar_posix \' \'\\\'\' "$_str" || return "$?" ;;
    esac  # -> $_str

    # The usage of `eval` here is safe. Assuming $_str is `"'\''abc` (we escape
    # single quotes in $1 before they're passed to `eval`) and $2 is `a`:
    #
    # First expansion (current shell):
    # `eval "$2=\"\$$2 '\$_str'\""` -> `eval a="$a '$_str'"` (lit.)
    #
    # Second expansion (`eval`); assuming the content of $a is `'b'`:
    # `eval a="$a '$_str'"` -> `a = 'b' '"'\''abc'` (illust. of meta expansion)
    #
    # Key points:
    # - Due to the sophisticated escaping, single quotes from the first
    #   expansion carry their significance to the second expansion.
    eval "$2=\"\$$2 '\$_str'\""
}
