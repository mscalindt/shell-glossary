#! .desc:
# Get N single-quoted argument in a single-quote-escaped string
#! .params:
# <$1> - "N"_arg(
#     '0' - last
#     .
# )
# <"$2"> - single-quote-escaped string
#! .gives:
# (0) <"$_arg"> - string;
#                 single-quote-escaped argument
#! .rc:
# (0) success
# (1) argument does not exist
# (255) bad input
#.
sq_arg() {
    # Assert $1 is a whole number.
    case :"$1${1#*[!0123456789]}" in
        :) return 255 ;;
        :00) : ;;
        :0*) return 255 ;;
        :"$1$1") : ;;
        *) return 255 ;;
    esac

    # Iterate over $2/$_str (the single-quote-escaped arguments) until the
    # desired or the last one is reached.
    _i=0; _str="$2"; while :; do
        # `break` if the desired argument is reached.
        _i=$((_i + 1)); [ "$_i" -ne "$1" ] || break

        # "shift" the argument (strip the first argument) from $_str.
        case "$_str" in
            *\'\ \'*) _str="'${_str#*\' \'}"; continue ;;
        esac

        # Here, what remained of $_str is the last argument. If the desired
        # argument was not reached and the last argument is not wished for,
        # return `1` to indicate failure in reaching the desired argument.
        [ "$1" -eq 0 ] && break || return 1
    done

    # Set the desired argument as the first and sole positional parameter of
    # the function.
    case "$_str" in
        *\'\ \'*) set -- "${_str%%\' \'*}'" ;;
        *) set -- "$_str" ;;
    esac

    # Assert $1 is a valid single-quote-escaped argument.
    _arg="$1"; case "$_arg" in
        \'*\')
            # Strip the base single quote characters.
            _arg="${_arg#?}"
            _arg="${_arg%?}"

            # Verify whether every single quote is a proper escape sequence
            # (`'\''`) for a single quote character.
            while :; do case "$_arg" in
                *\'*)
                    _arg="${_arg#*\'}"; case "$_arg" in
                        "\\''"*) _arg="${_arg#???}" ;;
                        *) return 255 ;;
                    esac
                ;;
                *)
                    break
                ;;
            esac done
        ;;
        *)
            return 255
        ;;
    esac

    # Store the single-quote-escaped argument in $_arg.
    _arg="$1"
}
