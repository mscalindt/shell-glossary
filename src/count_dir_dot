#! .desc:
# Count `.*` (dot/hidden) directories in a directory
#! .params:
# <"$1"> - absolute directory path
# ["$2"] - suffix
#! .uses.fn:
# <assert> ('-absolute-path' '$1');
#          Assert a string
#! .gives:
# (0) <$_count> - integer
#! .rc:
# (0) success
# (255) bad usage
#! .rc.fn:
# (assert) (255) bad input
#! .caveats:
# > `ARG_MAX`.
#.
count_dir_dot() {
    assert -absolute-path "$1" || return 255

    # Assert $1 is a valid directory.
    [ -d "$1" ] || return 255
    [ -r "$1" ] || return 255

    _count=0

    # Use a glob pattern to match dot/hidden directories in $1 (the directory)
    # with an optional $2 (suffix). `.` and `..` can be matched.
    #
    # For more information, refer to:
    # > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell Command
    #   Language, Subsection: Patterns Used for Filename Expansion".
    #
    # (2024-08-15) Note:
    # According to POSIX.1-2024, a future version of the standard may require
    # that `.` and `..` are ignored by the glob (if they exist).
    set -- "${1%/}"/.*"$2"/

    # Shift `.` and `..` to simplify glob assert.
    while [ "$1" ]; do case "$1" in
        */'.'/ | */'..'/) shift ;;
        *) break ;;
    esac done

    # Assert the glob expanded.
    if [ -e "$1" ]; then
        _count=$#
    fi
}
