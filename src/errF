#! .desc:
# Print red-colored formatted text to stderr and exit
#! .params:
# <$1> - exit value
# <$2> - format(
#     '-' - raw
#     '--' - raw; no <newline>
#     .
# )
# <"$3">+ - text
#! .uses.var:
# [NO_COLOR] $ - environment variable;
#                disable color
#! .uses.fn:
# <assert> ('-whole-n' '$1');
#          Assert a string
#! .rc:
# (255) bad input
#! .rc.fn:
# (assert) (255) bad input
#! .ec:
# ($1) *
#.
errF() {
    # Assert $1 is a number in the range 0-255.
    { assert -whole-n "$1" && [ "$1" -le 255 ]; } || return 255

    _color='\033[1;31m'
    _reset='\033[0m'
    _val="$1"
    _format="$2"

    [ ! "$NO_COLOR" ] || { _color=; _reset=; }

    shift 2; case "$_format" in
        '-') printf "%b%s%b\n" "$_color" "$*" "$_reset" >&2 ;;
        '--') printf "%b%s%b" "$_color" "$*" "$_reset" >&2 ;;
        *) return 255 ;;
    esac

    exit "$_val"
}
