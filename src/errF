#! .desc:
# Print red-colored formatted text to stderr and exit
#! .params:
# <$1> - exit code
# <$2> - format(
#     '-' - raw
#     '--' - raw; no <newline>
#     '-date' - `date` %H%M%S
#     '-date-' - `date` %H%M%S; no <newline>
#     .
# )
# <"$3"+> - text
#! .uses.var:
# [NO_COLOR] $ - environment variable;
#                disables colored output
#! .uses.fn:
# <assert> ('-whole-n' '$1');
#          Assert a string
#! .rc:
# (255) bad input
#! .ec:
# ($1) *
#.
errF() {
    # Assert $1 is a number in the range 0-255.
    assert -whole-n "$1" || return 255
    [ "$1" -le 255 ] || return 255

    # Check if color codes should be used.
    if [ "$NO_COLOR" ]; then
        _color=; _reset=
    else
        _color='\033[1;31m'; _reset='\033[0m'
    fi

    _code="$1"; _format="$2"; shift 2

    case "$_format" in
        '-')
            printf "%b%s%b\n" "$_color" "$*" "$_reset" >&2
        ;;
        '--')
            printf "%b%s%b" "$_color" "$*" "$_reset" >&2
        ;;
        '-date')
            printf "%b[%s] =>>: %s%b\n" "$_color" "$(date '+%H:%M:%S')" "$*" \
                "$_reset" >&2
        ;;
        '-date-')
            printf "%b[%s] =>>: %s%b" "$_color" "$(date '+%H:%M:%S')" "$*" \
                "$_reset" >&2
        ;;
        *)
            return 255
        ;;
    esac

    exit "$_code"
}
