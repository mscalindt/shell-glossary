#! .desc:
# Print red-colored formatted text to stderr and exit
#! .params:
# <$1> - exit code
# <$2> - format(
#     '-' - raw
#     '--' - raw; no linefeed
#     '-date' - `date` %H%M%S
#     '--date' - `date` %H%M%S; no linefeed
#     .
# )
# <"$3"+> - text
#! .uses:
# [NO_COLOR] $ - environment variable;
#                disables colored output
#! .rc:
# (255) bad input
#! .ec:
# ($1) *
#.
errF() {
    # Assert $1 is a whole number.
    case :"$1${1#*[!0123456789]}" in
        :) return 255 ;;
        :00) : ;;
        :0*) return 255 ;;
        :"$1$1") : ;;
        *) return 255 ;;
    esac

    # Assert $1 is a number in the range 0-255.
    [ "$1" -le 255 ] || return 255

    # Check if color codes should be used.
    if [ "$NO_COLOR" ]; then
        _color=; _reset=
    else
        _color='\033[1;31m'; _reset='\033[0m'
    fi

    # Save the format into $_format and shift both the exit code ($1) and the
    # format ($2) parameters; what will remain of $@ is the text parameter(s).
    _code="$1"; _format="$2"; shift 2

    # Print the specified format.
    case "$_format" in
        '-')
            printf "%b%s%b\n" "$_color" "$*" "$_reset" >&2
        ;;
        '--')
            printf "%b%s%b" "$_color" "$*" "$_reset" >&2
        ;;
        '-date')
            printf "%b[%s] =>>: %s%b\n" "$_color" "$(date '+%H:%M:%S')" "$*" \
                "$_reset" >&2
        ;;
        '--date')
            printf "%b[%s] =>>: %s%b" "$_color" "$(date '+%H:%M:%S')" "$*" \
                "$_reset" >&2
        ;;
        *)
            return 255
        ;;
    esac

    # Issue `exit` with the specified code.
    exit "$_code"
}
