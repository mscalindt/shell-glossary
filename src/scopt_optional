#! .desc:
# Match specific option(s) with an optional option argument
#! .params:
# <"$1"+> - option(s)
#! .uses.var:
# <opt> $ - string;
#           first positional parameter
#! .gives:
# (0) <"$opt_arg"> - string;
#                    option argument
# (0) <"$opt_match"> - string;
#                      literal option matched
#! .sets:
# (0) <opt> $ - '';
# (0) <opt_shift> $ - '1';
#! .rc:
# (0) success
# (1) no match
#! .ec:
# (2) bad argument specification
#.
scopt_optional() {
    while [ "$1" ]; do
        # Try to match an option without an argument.
        case "$opt" in
            "$1")
                opt_arg=
                opt_match="$1"
                opt_shift=1
                opt=

                return 0
            ;;
        esac

        # Assert any potential argument specification is valid. An option
        # cannot end with `=` after being matched, otherwise it's invalid;
        # example: `foo=`.
        case "$opt" in
            "$1"'=')
                printf "%s: Invalid argument specification for: '%s'\n" \
                    "${0##*/}" "$1" >&2
                printf "%s: Try '%s --help' for more information.\n" \
                    "${0##*/}" "${0##*/}" >&2
                exit 2
            ;;
        esac

        # Try to match an option with an argument separated by `=` on the same
        # positional parameter; example: `foo=bar`.
        case "$opt" in
            "$1"'='*)
                opt_arg="${opt#"$1"=}"
                opt_match="$1"
                opt_shift=1
                opt=

                return 0
            ;;
        esac

        shift
    done

    return 1
}
