#! .desc:
# Assert a string
#! .params:
# <$1> - type(
#     '-bit' - N in base 2 that represents a valid bit
#     '-n' - N [0,1,00,01...]
#     '-natural-n' - natural N [1...]
#     '-whole-n' - whole N [0,1...]
#     '-absolute-path' - absolute path (/*)
#     '-relative-path' - relative path
#     '-shell-name' - shell name
#     .
# )
# <"$2"> - string
#! .rc:
# (0) true
# (1) false
# (255) bad input
#.
assert() {
    # Assert the specified string type.
    case "$1" in
        '-bit')
            # Assert $2 is a number in base 2 that represents a valid bit. A
            # valid bit is a natural number that represents a specific bit
            # position in a bitmask and is always a power of 2 (`1`, `2`, `4`,
            # `8`, ...).
            #
            # A number is a power of 2 if performing bitwise AND in the
            # expression `N & (N - 1)` results in zero (the binary
            # representation turns to all zeroes due to the single 1-bit being
            # flipped off, given N was an actual power of 2 in base 2).
            assert -natural-n "$2" || return 1
            [ "$(($2 & ($2 - 1)))" -eq 0 ] || return 1
        ;;
        '-n')
            # Assert $2 is a number (`0`, `1`, `00`, `01`, ...). A number is
            # any string consisting only of digits.
            case :"$2${2#*[!0123456789]}" in
                :) return 1 ;;
                :"$2$2") : ;;
                *) return 1 ;;
            esac
        ;;
        '-natural-n')
            # Assert $2 is a natural number (`1`, `2`, ...). A natural number
            # is any string consisting only of digits, of which the first is
            # not `0`.
            case :"$2${2#*[!0123456789]}" in
                : | :0*) return 1 ;;
                :"$2$2") : ;;
                *) return 1 ;;
            esac
        ;;
        '-whole-n')
            # Assert $2 is a whole number (`0`, `1`, `2`, ...). A whole number
            # is `0` and any string consisting only of digits, of which the
            # first is not `0`.
            case :"$2${2#*[!0123456789]}" in
                :) return 1 ;;
                :00) : ;;
                :0*) return 1 ;;
                :"$2$2") : ;;
                *) return 1 ;;
            esac
        ;;
        '-absolute-path')
            # Assert $2 is an absolute (/*) path. An absolute path is any
            # string of which the first character is `/`.
            case "$2" in
                '/'*) : ;;
                *) return 1 ;;
            esac
        ;;
        '-relative-path')
            # Assert $2 is a relative (partial) path. A relative path is any
            # string of which the first character is not `/`.
            case "$2" in
                '/'*) return 1 ;;
                *) [ "$2" ] || return 1 ;;
            esac
        ;;
        '-shell-name')
            # Assert $2 is a shell name. The character classes have been
            # intentionally expanded to be locale-independent.
            #
            # For more information, refer to:
            # > "POSIX.1-2017, Volume: Base Definitions, Section: Definitions,
            #   Subsection: Name".
            # > "POSIX.1-2017, Volume: Base Definitions, Section: Regular
            #   Expressions, Subsection: RE Bracket Expression".
            case "$2" in
                [0123456789]*)
                    return 1
                ;;
                *[!0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_]*)
                    return 1
                ;;
                *)
                    [ "$2" ] || return 1
                ;;
            esac
        ;;
        *)
            return 255
        ;;
    esac
}
