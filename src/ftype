#! .desc:
# Identify the type of an object on the filesystem;
# `B` -- "block special file",
# `C` -- "character special file",
# `D` -- "directory",
# `F` -- "regular file",
# `L` -- "symbolic link",
# `P` -- "FIFO / named pipe",
# `S` -- "socket",
# `?` -- "unrecognized file type",
# `>` -- "does not exist"
#! .params:
# <"$1"> - absolute path
# [$2] - fd(
#     '-err' - print to stderr; &2
#     '-info' - print to stdout; &1
#     .
# )
#! .uses.var.err:
# [NO_COLOR] $ - environment variable;
#                disables colored output
#! .uses.var.info:
# [NO_COLOR] $ - environment variable;
#                disables colored output
#! .uses.fn:
# (-err) <err> ('-r' '--' "text");
#              Print formatted text to stderr
# (-info) <info> ('-w' '--' "text");
#                Print formatted text
#! .sets:
# (0) <_type> $ - 'B' | 'C' | 'D' | 'F' | 'L' | 'P' | 'S' | '?' | '>';
#! .rc:
# (0) success
# (255) bad input
#! .rc.fn:
# (err) (*) error
# (info) (*) error
#.
ftype() {
    case "$2" in
        '-err') set -- "$1" 'err' '-r' '--' ;;
        '-info') set -- "$1" 'info' '-w' '--' ;;
        *) [ ! "$2" ] || return 255; set -- "$1" ':' ;;
    esac

    # A trailing slash, if present, will be removed for operator `-h` of
    # `test`, because otherwise it will cause the link to be followed and thus
    # the assert `-h` would always fail.
    #
    # For more information, refer to:
    # > "POSIX.1-2024, Volume: Base Definitions, Section: General Concepts,
    #   Subsection: Pathname Resolution".
    # > "POSIX.1-2024, Volume: Shell & Utilities, Section: Utilities, Utility:
    #   test".
    if [ -b "$1" ]; then
        shift; _type='B'; "$@" 'B'  # block special file
    elif [ -c "$1" ]; then
        shift; _type='C'; "$@" 'C'  # character special file
    elif [ -d "$1" ]; then
        shift; _type='D'; "$@" 'D'  # directory
    elif [ -f "$1" ]; then
        shift; _type='F'; "$@" 'F'  # regular file
    elif [ -h "${1%/}" ]; then
        shift; _type='L'; "$@" 'L'  # symbolic link
    elif [ -p "$1" ]; then
        shift; _type='P'; "$@" 'P'  # FIFO / named pipe
    elif [ -S "$1" ]; then
        shift; _type='S'; "$@" 'S'  # socket
    elif [ -e "$1" ]; then
        shift; _type='?'; "$@" '?'  # unrecognized file type
    else
        shift; _type='>'; "$@" '>'  # does not exist
    fi
}
