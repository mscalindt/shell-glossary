#! .desc:
# Assert confirmation to continue
#! .params:
# [$1] - default_action(
#     '-n' - forbidden
#     '-y' - permitted
#     .
# )
#! .uses.var:
# [NO_COLOR] - environment variable;
#              disable color
#! .sets:
# <_action> $ - "read -r" | 'N' | 'Y';
# <_def_action> $ - 'N' | 'Y';
#! .rc:
# (0) true
# (1) false
#! .ec:
# (255) input error
#! .desc.ext:
# $1 specifies the default action to be used in case of empty input.
# If omitted, the default action is set to 'forbidden'.
#
# By default, bold (`1;`) foreground (`3X`) white (`7`) color
# escape sequence of ANSI is used in the prompt.
#
# The usage of color results in undefined behavior. For strict POSIX
# compatibility, set variable `NO_COLOR` to a non-empty value.
#.
confirm_cont() {
    # Set default action; defaults to `-n` if not specified.
    case "${1:--n}" in
        '-n')
            _def_action='N'
            _prompt='Continue? [y/N] '
        ;;
        '-y')
            _def_action='Y'
            _prompt='Continue? [Y/n] '
        ;;
        *)
            exit 255
        ;;
    esac

    # Add white color to $_prompt if permitted.
    [ "$NO_COLOR" ] || _prompt='\033[1;37m'"$_prompt"'\033[0m'

    printf "%b" "$_prompt"

    # Store input in $_action; if empty, $_def_action is stored instead.
    read -r _action; [ "$_action" ] || _action="$_def_action"

    # Return "permitted" if the first character entered is `Y` or `y`.
    case "$_action" in
        [Yy]*) return 0 ;;
    esac

    return 1
}
