#! .desc:
# Ask for confirmation to continue
#! .params:
# [$1] - action(
#     '-n' - default action: no
#     '-y' - default action: yes
#     .
# )
#! .uses:
# [NO_COLOR] $ - environment variable;
#                disables colored output
#! .rc:
# (0) permitted
# (1) forbidden
#.
confirm_cont() {
    # Asserting the variables to be used are empty is crucial for string safety
    # due to the missing input validation.
    _prompt=; _def_action=

    # Determine the default action and the prompt to be printed. Missing $1
    # (default action) is handled by automatically specifying `-n`.
    if [ "${1:--n}" = '-n' ]; then
        _prompt='Continue? [y/N] '
        _def_action='N'
    elif [ "$1" = '-y' ]; then
        _prompt='Continue? [Y/n] '
        _def_action='Y'
    fi

    # Apply color to the prompt if $NO_COLOR is not set.
    if [ ! "$NO_COLOR" ]; then
        _prompt='\033[1;37m'"$_prompt"'\033[0m'
    fi

    # Print the prompt.
    printf "%b" "$_prompt"

    # Store the input in $_action; if empty, $_def_action will be used instead.
    read -r _action; [ "$_action" ] || _action="$_def_action"

    # Check the supplied input or perform the default action.
    case "$_action" in
        [Yy]*) return 0 ;;
        [Nn]*) return 1 ;;
        *) return 1 ;;  # Return forbidden for any unexpected input.
    esac
}
