#! .desc:
# Convert octal to "file mode" string
#! .params:
# <$1> - octal mode
#! .gives.var:
# (0) <_mode> - string;
#               file mode
#! .rc:
# (0) success
#! .ec:
# (255) input error
#.
fmode_octal() {
    [ "$1" ] || exit 255

    # Leading zeroes shall be permitted, so strip them up to the first
    # character that is not a leading zero.
    set -- "${1#"${1%%[!0]*}"}"

    case "${#1}" in
        0)
            _s=0; _u=0; _g=0; _o=0
        ;;
        1)
            _s=0; _u=0; _g=0; _o="$1"
        ;;
        2)
            _s=0; _u=0; _g="${1%?}"; _o="${1#?}"
        ;;
        3)
            _s=0; _u="${1%??}"; _g="${1#?}" && _g="${_g%?}"; _o="${1#??}"
        ;;
        4)
            _s="${1%???}"
            _u="${1#?}" && _u="${_u%??}"
            _g="${1#??}" && _g="${_g%?}"
            _o="${1#???}"
        ;;
        *)
            exit 255
        ;;
    esac

    case "$_s" in
        0|1|2|3|4|5|6|7) : ;;
        *) exit 255 ;;
    esac

    _mode=; _i=0; until [ "$_i" -eq 3 ]; do
        case "$_i" in
            0) _bit="$_u" ;;
            1) _bit="$_g" ;;
            2) _bit="$_o" ;;
        esac

        case "$_bit" in
            0) _r='-'; _w='-'; _x='-' ;;
            1) _r='-'; _w='-'; _x='x' ;;
            2) _r='-'; _w='w'; _x='-' ;;
            3) _r='-'; _w='w'; _x='x' ;;
            4) _r='r'; _w='-'; _x='-' ;;
            5) _r='r'; _w='-'; _x='x' ;;
            6) _r='r'; _w='w'; _x='-' ;;
            7) _r='r'; _w='w'; _x='x' ;;
            *) exit 255 ;;
        esac

        case "$_i$_s" in
            04|05|06|07) [ "$_x" = '-' ] && _x='S' || _x='s' ;;
            12|13|16|17) [ "$_x" = '-' ] && _x='S' || _x='s' ;;
            21|23|25|27) [ "$_x" = '-' ] && _x='T' || _x='t' ;;
        esac

        _mode="$_mode$_r$_w$_x"
        _i="$((_i + 1))"
    done

    return 0
}
