#! .desc:
# Match `-`-delimited short/long option with an optional option argument
#! .params (<2+>):
# <[$1]> - option
# [$2] - -* (short)
# [$3] - --* (long)
#! .gives.var:
# (0) <opt_arg> - [string];
#                 option argument
#! .rc:
# (0) true
# (1) false
#! .ec:
# (2) invalid option argument specification
# (255) input error
#.
copt_optional() {
    [ "$#" -ge 2 ] || exit 255

    # -> Assert $1 is a `-`-delimited short/long option;
    # -> Assert $2/$3 (whichever applies) is a `-`-delimited short/long option;
    # -> Assert (set) the relevant positional parameter is second in position.
    case "$1" in
        '--'*)
            [ "${#1}" -gt 2 ] || return 1

            case "$3" in
                '--'*)
                    [ "${#3}" -gt 2 ] || exit 255

                    set -- "$1" "$3"
                ;;
                *)
                    [ ! "$3" ] || exit 255

                    case "$2" in
                        '--'*) [ "${#2}" -gt 2 ] || exit 255 ;;
                        '-'*) return 1 ;;
                        *) exit 255 ;;
                    esac
                ;;
            esac
        ;;
        '-'*)
            [ "${#1}" -gt 1 ] || return 1

            case "$2" in
                '--'*) return 1 ;;
                '-'*) [ "${#2}" = 2 ] || exit 255 ;;
                *) exit 255 ;;
            esac
        ;;
        *)
            return 1
        ;;
    esac

    # Assert $1 fully matches $2; no option argument.
    case "$1" in
        "$2")
            opt_arg=

            return 0
        ;;
    esac

    # Assert $1 matches $2 with an argument.
    case "$1" in
        '--'*)
            case "$1" in
                "$2"'=')
                    printf "%s: Invalid argument specification for: '%s'\n" \
                        "${0##*/}" "$1" >&2
                    printf "%s: Try '%s --help' for more information.\n" \
                        "${0##*/}" "${0##*/}" >&2

                    exit 2
                ;;
                "$2"'='*)
                    opt_arg="${1#"$2"=}"

                    return 0
                ;;
            esac
        ;;
        '-'*)
            case "$1" in
                "$2"*)
                    opt_arg="${1#"$2"}"

                    return 0
                ;;
            esac
        ;;
    esac

    return 1
}
