#! .desc:
# Unset a bit, the power of 2, in a pseudo-bitmask shell variable
#! .params:
# <$1> - bit(
#     '0' - unset all bits
#     .
# )
# <$2> - variable name
#! .uses.fn:
# <assert> ("type" "string");
#          Assert a string
#! .rc:
# (0) success
# (*) error
#! .rc.fn:
# (assert) (255) bad input
#.
mask_unset() {
    # Remove `0x` from $1 (bit) if present.
    set -- "${1#0x}" "$2"

    # Handle value `0` for $1 (bit) specially: unset all bits.
    case "$1" in
        '0')
            assert -shell-name "$2" || return 255

            # Unset all bits in $2 (bitmask).
            eval "$2=0"
        ;;
    esac

    assert -bit "$1" || return 255
    assert -shell-name "$2" || return 255

    # Unset $1 (bit) in $2 (bitmask).
    eval "$2=\$(($2 & ~$1))"
}
