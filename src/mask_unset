#! .desc:
# Unset a bit, the power of 2, in a pseudo-bitmask shell variable
#! .params:
# <$1> - bit(
#     '0' - unset all bits
#     .
# )
# <$2> - variable name
#! .rc:
# (0) success
# (255) bad input / error
# (*) error
#.
mask_unset() {
    # Remove `0x` from $1 (bit) if present.
    set -- "${1#0x}" "$2"

    { assert -eq "$1" 0 || assert -bit "$1"; } || return 255
    assert -shell-name "$2" || return 255

    # Handle value `0` specially by unsetting all bits.
    case "$1" in
        '0') eval "$2=0" ;;
        *) eval "$2=\$(($2 & ~$1))" ;;
    esac
}
