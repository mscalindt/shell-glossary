#! .desc:
# Modify a path string
#! .params:
# <$1> - option_block(
#     'a' - resolve `.` lexically
#     'b' - resolve `..` lexically
#     'c' - strip consecutive slashes
#     'h' - resolve symbolic segments semantically
#     'k' - strip all trailing slashes if $_path logical directory
#     'l' - append `/` (if not present) if $_path physical directory
#     'm' - set $_path to `/` if $_path empty
#     'n' - unset $_path if $_path is `/`
#     'o' - unset $_path if $_path is absolute
#     'p' - unset $_path if $_path is relative
#     'q' - unset $_path if $_path is inexistent
#     'r' - prepend $PWD if relative
#     's' - prepend `./` if $_path is relative
#     't' - strip all trailing slashes if not directory
#     'u' - strip all trailing slashes if $_path not directory
#     'v' - append `/` (if not present) if directory
#     'w' - append `/` (if not present) if $_path directory
#     'x' - strip all leading slashes
#     'y' - strip all trailing slashes
#     .
# )
# ["$2"] - path
#! .uses:
# (-h) [()]
#! .uses.var:
# (-r) [PWD] $ - environment variable;
#                absolute pathname of the current working directory
#! .uses.fn:
# <map_pchunk_find> ('$2' '$_path' '' 'path_spec_static_' "function argument");
#                   Find success among cumulative path segments using a
#                   function
# <map_pchunk_find_rev> ('$2' '' '' 'path_spec_static_' '$1' '-h');
#                       Find success among cumulative path segments in reverse
#                       using a function
# [assert] ("type" "string");
#          Assert a string
#! .uses.util:
# (-h) [realpath] ('--' "file");
#                 resolve a pathname
#! .gives:
# (0) <"$_path"> - [string];
#                  [modified <$2>]
#! .sets:
# <path_spec_static_> ();
#! .rc:
# (0) success
# (*) error
#! .ec:
# (*) error
# (255) bad input / error
#! .ec.util:
# (realpath) (*) error
#! .desc.ext:
# 'Append/prepend' operations take place after 'strip' operations.
# 'Unset' operations take place after 'set' operations.
#
# When resolve operations take place and no path segments remain,
# the default behavior is "resolve to root" (`/`). This behavior
# generally aligns with POSIX, and can be influenced with option `-n`.
#
# When option `-h` is used, the presence of a broken symbolic segment prompts
# no action and is instead treated as an inexistent segment.
#
# When options `-a` and `-b` are combined with option `-h`,
# the resolving behavior explicitly becomes semantic.
#
# For more information, refer to:
# > "POSIX.1-2024, Volume: Base Definitions, Section: Definitions,
#   Subsection: Dot".
# > "POSIX.1-2024, Volume: Base Definitions, Section: Definitions,
#   Subsection: Dot-Dot".
# > "POSIX.1-2024, Volume: Base Definitions, Section: Environment Variables,
#   Subsection: Environment Variable Definition".
# > "POSIX.1-2024, Volume: Base Definitions, Section: Environment Variables,
#   Subsection: Other Environment Variables".
# > "POSIX.1-2024, Volume: Base Definitions, Section: General Concepts,
#   Subsection: Pathname Resolution".
# > "POSIX.1-2024, Volume: Shell & Utilities, Section: Utilities,
#   Subsection: realpath".
#.
path_spec_static() {
    path_spec_static_() {
        set -- "${1#\-}" "${2#\-}" "$3"

        [ "$1" ] && [ "$2" ] || exit 255

        case "$1" in
            *"$2"*) shift ;;
            *) return 1 ;;
        esac

        case "$1" in
            # $2 is a `.` segment,
            # (-a)
            # Resolve lexically.
            a)
                _path="$2"

                case "$_path" in
                    */) path_spec_static_ y y "$_path" ;;
                esac

                case "$_path" in
                    */'.') path_spec_static_ y y "${_path%'.'}" ;;
                    *) return 1 ;;
                esac

                # Default resolving behavior: "resolve to root" (`/`).
                [ "$_path" ] || _path=/
            ;;
            # $2 is a `..` segment,
            # (-b)
            # Resolve lexically.
            b)
                _path="$2"

                case "$_path" in
                    */) path_spec_static_ y y "$_path" ;;
                esac

                case "$_path" in
                    */'..')
                        path_spec_static_ y y "${_path%'..'}" && \
                        path_spec_static_ y y "${_path%/*}/"
                    ;;
                    *)
                        return 1
                    ;;
                esac

                # Default resolving behavior: "resolve to root" (`/`).
                [ "$_path" ] || _path=/
            ;;
            # (-c)
            # Strip consecutive slashes.
            c)
                case "$2" in
                    *//) _path="${2%"${2##*[!/]}"}/" ;;
                    *//*) _path="${2%%//*}/${2##*//}" ;;
                    *) return 1 ;;
                esac
            ;;
            # $2 is an existing symbolic path segment,
            # (-h)
            # Resolve using `realpath`.
            h)
                [ -e "$2" ] && [ -h "${2%"${2##*[!/]}"}" ] || return 1

                 _path="$(realpath -- "$2")"
            ;;
            # $2 is a logical directory,
            # (-k)
            # Strip all trailing slashes.
            k)
                { case "$2" in
                    */) [ -d "$2" ] && [ -h "${2%"${2##*[!/]}"}" ] ;;
                    *) return 1 ;;
                esac; } || return 1

                path_spec_static_ y y "$2"
            ;;
            # $2 is a physical directory but not a directory path,
            # (-l)
            # Append `/`.
            l)
                { case "$2" in
                    */) return 1 ;;
                    *) [ -d "$2" ] && [ ! -h "${2%"${2##*[!/]}"}" ] ;;
                esac; } || return 1

                path_spec_static_ v v "$2"
            ;;
            # $2 is empty,
            # (-m)
            # Set `/`.
            m)
                case ":$2" in
                    :) _path=/ ;;
                    *) return 1 ;;
                esac
            ;;
            # $2 is `/`,
            # (-n)
            # Unset.
            n)
                case "$2" in
                    /) _path= ;;
                    *) return 1 ;;
                esac
            ;;
            # $2 is an absolute path,
            # (-o)
            # Unset.
            o)
                assert -absolute-path "$2" || return 1

                _path=
            ;;
            # $2 is a relative path,
            # (-p)
            # Unset.
            p)
                assert -relative-path "$2" || return 1

                _path=
            ;;
            # $2 does not exist on the filesystem,
            # (-q)
            # Unset.
            q)
                [ "$2" ] && [ ! -e "$2" ] || return 1

                _path=
            ;;
            # $2 is a relative path,
            # (-r)
            # Prepend $PWD.
            r)
                assert -relative-path "$2" || return 1

                _path="${PWD%/}/$2"
            ;;
            # $2 is a relative path,
            # (-s)
            # Prepend `./`.
            s)
                assert -relative-path "$2" || return 1

                _path="./$2"
            ;;
            # $2 is not a directory,
            # (-t) (-u)
            # Strip all trailing slashes.
            t | u)
                { case "$2" in
                    */) [ ! -d "$2" ] ;;
                    *) return 1 ;;
                esac; } || return 1

                path_spec_static_ y y "$2"
            ;;
            # $2 is a directory but not a directory path,
            # (-v) (-w)
            # Append `/`.
            v | w)
                [ -d "$2" ] && { ! assert -directory-path "$2"; } || return 1

                _path="$2/"
            ;;
            # (-x)
            # Strip all leading slashes.
            x)
                case "$2" in
                    /*) _path="${2#"${2%%[!/]*}"}" ;;
                    *) return 1 ;;
                esac
            ;;
            # (-y)
            # Strip all trailing slashes.
            y)
                case "$2" in
                    */) _path="${2%"${2##*[!/]}"}" ;;
                    *) return 1 ;;
                esac
            ;;
            *)
                exit 255
            ;;
        esac

        set -- "$?"; [ "$1" = 0 ] || exit "$1"
    }

    # Static leading/trailing slashes strip operations, respectively.
    path_spec_static_ "$1" -x "$2" && set -- "$1" "$_path" || :
    path_spec_static_ "$1" -y "$2" && set -- "$1" "$_path" || :

    # Static directory-related strip/append operations, respectively.
    path_spec_static_ "$1" -t "$2" && set -- "$1" "$_path" || :
    path_spec_static_ "$1" -v "$2" && set -- "$1" "$_path" || :

    # Convert a relative path to absolute with $PWD. This operation shall
    # only be done after any initial static strip operations.
    path_spec_static_ "$1" -r "$2" && set -- "$1" "$_path" || :

    # Resolve the rightmost existing symbolic path segment. This operation
    # shall take priority over the remaining path resolving logic.
    map_pchunk_find_rev "$2" '' '' path_spec_static_ "$1" -h && {
        set -- "$1" "$_path${2#"$_segment"}"
    } || :

    # Resolve `.`.
    _path=
    while map_pchunk_find "$2" "$_path" '' path_spec_static_ "$1" -a; do
        set -- "$1" "$_path${2#"$_segment"}"
    done

    # Resolve `..`.
    _path=
    while map_pchunk_find "$2" "$_path" '' path_spec_static_ "$1" -b; do
        set -- "$1" "$_path${2#"$_segment"}"
    done

    # Strip consecutive slashes.
    _path=
    while map_pchunk_find "$2" "$_path" '' path_spec_static_ "$1" -c; do
        set -- "$1" "$_path${2#"$_segment"}"
    done

    # POSIX-compliant relative path `./` prepend. This operation shall
    # only be done after path resolution (conflicts with `.` resolving).
    path_spec_static_ "$1" -s "$2" && set -- "$1" "$_path" || :

    # Static directory-related result strip/append operations, respectively.
    path_spec_static_ "$1" -u "$2" && set -- "$1" "$_path" || :
    path_spec_static_ "$1" -w "$2" && set -- "$1" "$_path" || :

    # Logical/physical directory result strip/append operations, respectively.
    # These operations shall be done after any static directory-related result
    # strip/append operations.
    path_spec_static_ "$1" -k "$2" && set -- "$1" "$_path" || :
    path_spec_static_ "$1" -l "$2" && set -- "$1" "$_path" || :

    # Set/unset result operations, respectively.
    path_spec_static_ "$1" -m "$2" && set -- "$1" "$_path" || :
    path_spec_static_ "$1" -n "$2" && set -- "$1" "$_path" || :
    path_spec_static_ "$1" -o "$2" && set -- "$1" "$_path" || :
    path_spec_static_ "$1" -p "$2" && set -- "$1" "$_path" || :
    path_spec_static_ "$1" -q "$2" && set -- "$1" "$_path" || :

    _path="$2"
}
