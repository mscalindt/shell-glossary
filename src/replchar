#! .desc:
# Replace a specific character with character(s) in a string
#! .params:
# <"$1"> - specific character
# <"$2"> - character(s)
# <"$3"> - string
# [$4] - backend(
#     '-sed' - use the host version of `sed`; $1 cannot be newline
#     .
# )
#! .uses:
# [POSIX_COMPAT] $ - environment variable;
#                    forces the usage of parameter expansion; necessary for
#                    POSIX.1-2024 compliance, even if backend `sed`
# (-sed) <esc_sed> ("sed_string_type" '/' "string");
#                  Escape a string to be used literally as a POSIX `sed` string
#! .gives:
# (0) <"$_str"> - string;
#                 [modified <$3>]
#! .rc:
# (0) success
# (*) error
# (255) bad input/usage
#.
replchar() {
    # Assert $1 is a single character; multiple characters are currently not
    # supported.
    [ "${#1}" -eq 1 ] || return 255

    # Use an alternative backend if specified.
    case "$4" in
        '-sed')
            esc_sed -RE / "$1" || return "$?"
            set -- "$_str" "$2" "$3"

            esc_sed -replacement / "$2" || return "$?"
            set -- "$1" "$_str" "$3"

            # Store the output of `sed` in $_str using command substitution.
            # The custom `x` character at the end and its subsequent removal
            # outside the command substitution preserves any trailing linefeeds
            # stripped by the command substitution.
            #
            # For more information, refer to:
            # > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell
            #   Command Language, Subsection: Command Substitution".
            _str=$(
                printf "%s" "$3" | sed "s/$1/$2/g" || return "$?"
                printf "%s" 'x'
            ) 2> /dev/null || return "$?"
            _str="${_str%?}"

            return 0
        ;;
    esac

    # Save $IFS.
    _old_IFS="$IFS" 2> /dev/null
    ${IFS+':'} unset _old_IFS 2> /dev/null

    # Save the state of the pathname expansion flag and disable it if active;
    # disabled to disable the expansion of `*`.
    #
    # For more information, refer to:
    # > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell Command
    #   Language, Subsection: Pathname Expansion".
    case "$-" in
        *'f'*) _pn=0 ;;
        *) _pn=1; set -f ;;
    esac

    # Due to <space>, <tab>, and <newline> ("IFS white space") possessing a
    # special disruptive behavior in $IFS (field splitting), parameter
    # expansion must be used for those characters to ensure the function's
    # integrity.
    #
    # For more information, refer to:
    # > "POSIX.1-2017, Volume: Shell & Utilities, Section: Shell Command
    #   Language, Subsection: Field Splitting".
    #
    # (2024-08-16) Note:
    # According to POSIX.1-2024, stable usage of field splitting is not POSIX
    # anymore due to "IFS white space" being implementation-defined. To address
    # the issues brought upon, the environment variable `POSIX_COMPAT`, if set,
    # forces the function to always use parameter expansion; otherwise default
    # behavior applies. Field splitting is preferred and remains the default
    # due to its generally superior performance, which scales better with
    # larger input sizes compared to parameter expansion.
    if [ "$POSIX_COMPAT" ]; then
        # Traverse $3 (string), replacing the occurences of $1 with $2.
        _str=; _a="$3"; while :; do case "$_a" in
            *"$1"*)
                # Example character, replacement character, and string:
                # `a` `A` `ddaabcd`
                # $_b: `dd`
                # $_c: `aabcd`
                # $_d: `aa`
                # $_a: `bcd`
                _b="${_a%%"$1"*}"
                _c="${_a#"$_b"}"
                _d="${_c%%[!"$1"]*}"
                _a="${_a#"$_b$_d"}"

                # ${#_d}: `2`
                # $_chars: `AA`
                _chars=; _i=0; until [ "$_i" -eq "${#_d}" ]; do
                    _chars="$_chars$2"; _i=$((_i + 1))
                done

                # $_str: `ddAA`
                _str="$_str$_b$_chars"
            ;;
            *)
                # $_str: `ddAAbcd`
                _str="$_str$_a"; break
            ;;
        esac done
    else
        case "$1" in
            ' ' | '	' | '
')  # Parameter expansion (slower) method.
                # Traverse $3 (string), replacing the occurences of $1 with $2.
                _str=; _a="$3"; while :; do case "$_a" in
                    *"$1"*)
                        # Example character, replacement character, and string:
                        # `a` `A` `ddaabcd`
                        # $_b: `dd`
                        # $_c: `aabcd`
                        # $_d: `aa`
                        # $_a: `bcd`
                        _b="${_a%%"$1"*}"
                        _c="${_a#"$_b"}"
                        _d="${_c%%[!"$1"]*}"
                        _a="${_a#"$_b$_d"}"

                        # ${#_d}: `2`
                        # $_chars: `AA`
                        _chars=; _i=0; until [ "$_i" -eq "${#_d}" ]; do
                            _chars="$_chars$2"; _i=$((_i + 1))
                        done

                        # $_str: `ddAA`
                        _str="$_str$_b$_chars"
                    ;;
                    *)
                        # $_str: `ddAAbcd`
                        _str="$_str$_a"; break
                    ;;
                esac done
;;
*)  # Default field split (faster) method.
                # Field split $3 (string) based on $1 (character); the number
                # of fields produced (minus one, to account for the field split
                # itself) corresponds to the number of times the character has
                # appeared. To enforce stable field splitting behavior, $1 is
                # placed at the end of the string, ensuring the function's
                # integrity.
                #
                # Finally, $2 is placed at the end of each field (minus the
                # last one as aforementioned; they will be stripped for the
                # final field), effectively replacing any occurences of $1 with
                # $2.
                IFS="$1"; _chars="$2"; set -- $3"$IFS"
                _str=; while [ "$#" -ge 1 ]; do
                    _str="$_str$1$_chars"; shift
                done
                _str="${_str%"$IFS$_chars"}"
;;
        esac
    fi

    # Restore the active state of the pathname expansion flag if appropriate.
    if [ "$_pn" = 1 ]; then
        set +f
    fi

    # Restore $IFS.
    IFS="$_old_IFS" 2> /dev/null
    ${_old_IFS+':'} unset IFS 2> /dev/null
}
