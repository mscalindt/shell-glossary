#! .desc:
# Replace a specific character with character(s) in a string using IFS
#! .params:
# <"$1"> - specific character
# <"$2"> - character(s)
# <"$3"> - string
# [$4] - backend(
#     '-sed' - use the host version of `sed`; $1 cannot be <newline>
#     .
# )
#! .uses:
# [()]
#! .uses.fn (-sed):
# <esc_sed> ("sed_string_type" '/' "string");
#           Escape a string to be used literally as a POSIX `sed` string
#! .uses.util (-sed):
# <sed> ('s/$1/$2/g');
#       stream editor
#! .gives:
# (0) <"$_str"> - [string];
#                 [modified <$3>]
#! .rc:
# (0) success
# (*) error
# (255) bad input / error
#! .rc.fn:
# (esc_sed) (*) error
#! .rc.util:
# (sed) (*) error
#! .desc.ext:
# Note that, according to POSIX.1-2024, the stable usage of field splitting
# (IFS) is not POSIX anymore due to "IFS white space" being
# implementation-defined.
#
# In reference to the aforementioned, the handling of <space>, <tab>, and
# <newline> ("IFS white space") characters is undefined behavior.
#
# For more information, refer to:
# > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell Command Language,
#   Subsection: Command Substitution".
# > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell Command Language,
#   Subsection: Field Splitting".
# > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell Command Language,
#   Subsection: Pathname Expansion".
#.
replchar() {
    # Assert $1 is a single character; multiple characters are currently not
    # supported.
    [ "${#1}" = 1 ] || return 255

    # Use an alternative backend if specified.
    case "$4" in
        '-sed')
            esc_sed -RE / "$1" || return "$?"
            set -- "$_str" "$2" "$3"

            esc_sed -replacement / "$2" || return "$?"
            set -- "$1" "$_str" "$3"

            # Store the output of `sed` in $_str using command substitution.
            # The custom `x` character at the end and its subsequent removal
            # outside the command substitution preserves any trailing <newline>
            # characters stripped by command substitution.
            _str=$(
                printf "%s" "$3" | sed "s/$1/$2/g" || return "$?"
                printf "%s" 'x'
            ) || return "$?"
            _str="${_str%?}"

            return 0
        ;;
    esac

    [ ! "$4" ] || return 255

    # Save $IFS.
    _old_IFS="$IFS" 2> /dev/null
    ${IFS+':'} unset _old_IFS 2> /dev/null

    # Save the state of the pathname expansion flag and disable it if active;
    # disabled to disable the expansion of `*`.
    case "$-" in
        *'f'*) _pn=0 ;;
        *) _pn=1; set -f ;;
    esac

    # Field split $3 (string) based on $1 (character); the number of fields
    # produced (minus one, to account for the field split itself) corresponds
    # to the number of times the character has appeared. To enforce stable
    # field splitting behavior, $1 is placed at the end of the string,
    # ensuring the function's integrity.
    #
    # Finally, $2 is placed at the end of each field (minus the last one,
    # as aforementioned; they will be stripped for the final field),
    # effectively replacing any occurences of $1 with $2.
    IFS="$1"; _chars="$2"; set -- $3"$IFS"
    _str=; while [ "$#" -ge 1 ]; do
        _str="$_str$1$_chars"; shift
    done
    _str="${_str%"$IFS$_chars"}"

    # Restore the active state of the pathname expansion flag if appropriate.
    if [ "$_pn" = 1 ]; then
        set +f
    fi

    # Restore $IFS.
    IFS="$_old_IFS" 2> /dev/null
    ${_old_IFS+':'} unset IFS 2> /dev/null

    return 0
}
