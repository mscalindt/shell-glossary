#! .desc:
# Replace specific character(s) with character(s) in a string using IFS
#! .params:
# [$1] - specific character(s)
# [$2] - character(s)
# [$3] - string
#! .gives.var:
# (0) <_str> - [string];
#              [modified <$3>]
#! .sets:
# (0) <set +f>;
#! .rc:
# (0) success
#! .ec:
# (255) input error
#! .desc.ext:
# The specification of multi-byte characters or multiple characters is allowed,
# but the former results in undefined behavior, and the latter might be
# unstable, in respect to the locale and platform (shell interpreter);
# the result might therefore be incorrect.
#
# $1 cannot contain characters part of "IFS white space"[1].
#
# For more information, refer to:
# > "POSIX.1-2024, Volume: Base Definitions, Section: Character Set,
#   Subsection: Character Encoding".
# > "POSIX.1-2024, Volume: Base Definitions,
#   Section: Directory Structure and Devices,
#   Subsection: Directory Structure and Files".
# > "POSIX.1-2024, Volume: Base Definitions, Section: Locale,
#   Subsection: LC_CTYPE".
# > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell Command Language,
#   Subsection: Field Splitting".
# > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell Command Language,
#   Subsection: Pathname Expansion".
# > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell Command Language,
#   Subsection: set".
#
# [1] "IFS white space" characters are: <space>, <tab>, <newline>.
#     Note that according to POSIX.1-2024, it is implementation-defined
#     whether any other characters consist part of "IFS white space".
#     See the "Field Splitting" POSIX reference for details.
#.
replchar() {
    { ! assert -has-shell-whitespace "$1"; } || exit 255

    # Save $IFS.
    _old_IFS="$IFS" 2> /dev/null
    ${IFS+':'} unset _old_IFS 2> /dev/null

    # Disable the expansion of `*` (set `noglob`).
    set -f

    # Field split $3 (string) based on $1 (character(s)); the number of fields
    # produced (minus one, to account for the field split itself) corresponds
    # to the number of times characters in $1 have appeared, collectively.
    # To enforce stable field splitting behavior, $1 is placed at
    # the end of the string, ensuring the function's integrity.
    #
    # Finally, $2 is placed at the end of each field (minus the last one,
    # as aforementioned; they will be stripped for the final field),
    # effectively replacing any occurences of $1 with $2.
    IFS="$1"; _chars="$2"; set -- $3"$IFS"
    _str=; for _arg in "$@"; do
        _str="$_str$_arg$_chars"
    done
    _str="${_str%"$IFS$_chars"}"

    # Enable the expansion of `*` (unset `noglob`).
    set +f

    # Restore $IFS.
    IFS="$_old_IFS" 2> /dev/null
    ${_old_IFS+':'} unset IFS 2> /dev/null

    return 0
}
