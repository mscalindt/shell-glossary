#! .desc:
# Read a file raw
#! .params:
# <$1> - method(
#     '-' - read heredoc (stdin) with command substitution
#     '-cat' - use `cat`
#     '-subshell' - use command substitution with shell input redirection
#     '-var' - use string concatenation with shell input redirection
#     .
# )
# ["$2"] - file path
#! .uses:
# [&9]
# [()]
# [<]
#! .uses.util:
# [cat] ('--' '$2');
#       concatenate and print files
#! .gives:
# (0) <"$_file"> - [string];
#                  raw content of $2/stdin
#! .rc:
# (0) success
# (*) error
# (255) bad input / error
#! .rc.util
# (cat) (*) error
#! .desc.ext:
# For more information, refer to:
# > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell Command Language,
#   Subsection: Command Substitution".
# > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell Command Language,
#   Subsection: exec".
# > "POSIX.1-2024, Volume: Shell & Utilities, Section: Utilities,
#   Utility: read".
#.
file_preload() {
    # Read the file with the specified method.
    #
    # Use `cat` to read the file if it is a potential specification of a file
    # in `/dev`, `/proc`, or `/sys` (kernel-created virtual file).
    case "$1" in
        '-')
            # `read` will consume stdin to store the output of each `printf`
            # in $_file using command substitution. The custom `x` character
            # at the end and its subsequent removal outside the command
            # substitution preserves any trailing <newline> characters
            # stripped by command substitution.
            _file=$(
                while IFS= read -r _line; do
                    printf "%s\n" "$_line"
                done; printf "%s" "${_line}x"
            )
            _file="${_file%?}"
        ;;
        '-cat')
            # Store the output of `cat` in $_file using command substitution.
            # The custom `x` character at the end and its subsequent removal
            # outside the command substitution preserves any trailing <newline>
            # characters stripped by command substitution.
            _file=$(cat -- "$2" && printf "%s" 'x') || return "$?"
            _file="${_file%?}"
        ;;
        '-subshell')
            # Open the file and assign it to file descriptor `9`. The usage of
            # a file descriptor simplifies the error handling. Additionally,
            # TOCTOU flaws are completely avoided this way.
            { exec 9< "$2"; } || return "$?"

            # Store the output of each `printf` in $_file using command
            # substitution. The custom `x` character at the end and its
            # subsequent removal outside the command substitution preserves any
            # trailing <newline> characters stripped by command substitution.
            _file=$(
                while IFS= read -r _line <&9; do
                    printf "%s\n" "$_line"
                done; printf "%s" "${_line}x"
            )
            _file="${_file%?}"

            # Release file descriptor `9` to close the associated file.
            exec 9<&-
        ;;
        '-var')
            # Open the file and assign it to file descriptor `9`. The usage of
            # a file descriptor simplifies the error handling. Additionally,
            # TOCTOU flaws are completely avoided this way.
            { exec 9< "$2"; } || return "$?"

            # Append with <newline> each $_line to an initially empty $_file to
            # build the raw content of the file.
            _file=; while IFS= read -r _line <&9; do
                _file="$_file$_line
"
            done; _file="$_file$_line"

            # Release file descriptor `9` to close the associated file.
            exec 9<&-
        ;;
        *)
            return 255
        ;;
    esac
}
