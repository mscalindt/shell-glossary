#! .desc:
# Escape meta characters in a string
#! .params:
# <"$1"> - string
# <"$2"> - chars(
#     "-chars X" - backslash escape "X" character(s)
#     '-dq' - backslash escape all characters special within double quotes:
#             $ ` " \ [:space:]
#     .
# )
#! .uses:
# <replchar> ("specific character" "character(s)" '$1');
#            Replace a specific character with character(s) in a string
#! .gives:
# (0) <"$_str"> - string;
#                 [modified <$1>]
#! .rc:
# (0) success
# (*) error
# (255) bad input/usage
#.
esc_str() {
    # Define sensible constraints for usage.
    # `128` denotes the ASCII set.
    [ "${#2}" -le 128 ] || return 255

    # Prepare the character set ($_chars) to be used.
    case "$2" in
        '-chars '*)
            # Get the specified characters in $2 into $_chars.
            _chars="${2#'-chars '}"

            # It is required that the character `\` is escaped first as to not
            # later escape our own escapes, since this character is used to
            # escape the other characters. To make sure `\` will always be
            # escaped first, reorder it to always come first if present in the
            # character set.
            case "$_chars" in
                \\*) : ;;
                *\\*) _chars="\\${_chars%%\\*}${_chars#*\\}" ;;
            esac
        ;;
        '-dq')
            # The character set special within double quotes, specifically:
            # $ ` " \ [:space:]
            _chars='\$"` '
        ;;
        *)
            return 255
        ;;
    esac

    # Store the string ($1) into $_str and set $_chars as the function's sole
    # positional parameter ($1).
    _str="$1"; set -- "$_chars"; while [ "$1" ]; do
        # Extract the first character of $1.
        _char="${1%"${1#?}"}"

        # Replace each instance of a character with an escaped one.
        replchar "$_char" "\\$_char" "$_str" || return "$?"

        # Remove the first character from $1.
        set -- "${1#?}"
    done
}
