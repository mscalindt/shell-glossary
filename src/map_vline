#! .desc:
# Process all populated lines of a variable (string) with a function
#! .params:
# <"$1"> - string
# <$2> - function name
#! .rc:
# (0) success
# (*) error
#.
map_vline() {
    # Save $IFS.
    _old_IFS="$IFS" 2> /dev/null
    ${IFS+':'} unset _old_IFS 2> /dev/null

    # Save the state of the pathname expansion flag and disable it if active;
    # disabled to disable the expansion of `*`.
    case "$-" in
        *'f'*) _pn=0 ;;
        *) _pn=1; set -f ;;
    esac

    # Word split $1 (string) based on the linefeed(s). The positional
    # parameters are reassigned such that $2 (the function) becomes $1 and the
    # produced arguments are the remaining positional parameters.
    IFS='
'
    set -- "$2" $1

    # Restore the active state of the pathname expansion flag if appropriate.
    if [ "$_pn" = 1 ]; then
        set +f
    fi

    # Restore $IFS.
    IFS="$_old_IFS" 2> /dev/null
    ${_old_IFS+':'} unset IFS 2> /dev/null

    # Avoid giving the function an empty string or a string that initially
    # consisted of just empty lines (linefeeds).
    [ "$2" ] || return 0

    # Give $1 (the function) the lines to be processed as positional
    # parameters. The function will be called only if there is something to
    # process, as noted in the comment above.
    "$@"
}
