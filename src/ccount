#! .desc:
# Count the times a character appears in a string
#! .params:
# <"$1"> - character
# <"$2"> - string
#! .uses.var:
# [POSIX_COMPAT] $ - environment variable;
#                    forces the usage of parameter expansion; necessary for
#                    POSIX.1-2024 compliance
#! .gives:
# (0) <$_count> - integer
#! .rc:
# (0) success
# (255) bad input
#! .caveats:
# > `ARG_MAX`.
# > `INT_MAX`. Even the string length expression `${#parameter}` is subject to
#   the system's native integer limits, as it returns an integer.
#.
ccount() {
    # Assert $1 is a single character; multiple characters are currently not
    # supported.
    [ "${#1}" = 1 ] || return 255

    # Save $IFS.
    _old_IFS="$IFS" 2> /dev/null
    ${IFS+':'} unset _old_IFS 2> /dev/null

    # Save the state of the pathname expansion flag and disable it if active;
    # disabled to disable the expansion of `*`.
    #
    # For more information, refer to:
    # > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell Command
    #   Language, Subsection: Pathname Expansion".
    case "$-" in
        *'f'*) _pn=0 ;;
        *) _pn=1; set -f ;;
    esac

    # Due to <space>, <tab>, and <newline> ("IFS white space") possessing a
    # special disruptive behavior in $IFS (field splitting), parameter
    # expansion must be used for those characters to ensure the function's
    # integrity.
    #
    # For more information, refer to:
    # > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell Command
    #   Language, Subsection: Field Splitting".
    #
    # (2024-08-15) Note:
    # According to POSIX.1-2024, stable usage of field splitting is not POSIX
    # anymore due to "IFS white space" being implementation-defined. To address
    # the issues brought upon, the environment variable `POSIX_COMPAT`, if set,
    # forces the function to always use parameter expansion; otherwise default
    # behavior applies. Field splitting is preferred and remains the default
    # due to its generally superior performance, which scales better with
    # larger input sizes compared to parameter expansion.
    if [ "$POSIX_COMPAT" ]; then
        # Traverse $2 (string), counting the occurences of $1 (character).
        _count=0; _a="$2"; while :; do case "$_a" in
            *"$1"*)
                # Example character and string: `a` `ddaabcd`
                # $_a: `aabcd`
                # $_b: `aa`
                # $_a: `bcd`
                # $_c: `2`
                _a="${_a#"${_a%%["$1"]*}"}"
                _b="${_a%%[!"$1"]*}"
                _a="${_a#"$_b"}"
                _c=${#_b}
                _count=$((_count + _c))
            ;;
            *)
                break
            ;;
        esac done
    else
        case "$1" in
            ' ' | '	' | '
')  # Parameter expansion (slower) method.
                # Traverse $2 (string), counting the occurences of $1
                # (character).
                _count=0; _a="$2"; while :; do case "$_a" in
                    *"$1$1"*)
                        # Example character and string: `a` `ddaabcd`
                        # $_a: `aabcd`
                        # $_b: `aa`
                        # $_a: `bcd`
                        # $_c: `2`
                        _a="${_a#"${_a%%["$1"]*}"}"
                        _b="${_a%%[!"$1"]*}"
                        _a="${_a#"$_b"}"
                        _c=${#_b}
                        _count=$((_count + _c))
                    ;;
                    *"$1"*)
                        # Niche optimization: If no consecutive
                        # "IFS white space" is present, special field splitting
                        # can be used instead; the field split is now stable.
                        # $2 is wrapped in $IFS, turning an occurence of IFS
                        # white space anywhere into a field, safely avoiding
                        # its disruptive behavior.
                        IFS="$1"
                        set -- "$IFS"$_a"$IFS"
                        _count=$((_count + ($# - 1)))

                        break
                    ;;
                    *)
                        break
                    ;;
                esac done
;;
*)  # Default field split (faster) method.
                # Field split $2 (string) based on $1 (character); the number
                # of fields produced (minus one, to account for the field split
                # itself) corresponds to the number of times the character has
                # appeared. To enforce stable field splitting behavior, $1 is
                # placed at the end of the string, ensuring the function's
                # integrity.
                IFS="$1"; set -- $2"$IFS"; _count=$(($# - 1))
;;
        esac
    fi

    # Restore the active state of the pathname expansion flag if appropriate.
    if [ "$_pn" = 1 ]; then
        set +f
    fi

    # Restore $IFS.
    IFS="$_old_IFS" 2> /dev/null
    ${_old_IFS+':'} unset IFS 2> /dev/null

    return 0
}
