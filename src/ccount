#! .desc:
# Count the times a character appears in a string using IFS
#! .params:
# <"$1"> - character
# <"$2"> - string
#! .gives:
# (0) <$_count> - integer
#! .rc:
# (0) success
# (255) bad input
#! .desc.ext:
# Note that, according to POSIX.1-2024, the stable usage of field splitting
# (IFS) is not POSIX anymore due to "IFS white space" being
# implementation-defined.
#
# In reference to the aforementioned, the handling of <space>, <tab>, and
# <newline> ("IFS white space") characters is undefined behavior.
#
# For more information, refer to:
# > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell Command Language,
#   Subsection: Field Splitting".
# > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell Command Language,
#   Subsection: Pathname Expansion".
#.
ccount() {
    # Assert $1 is a single character; multiple characters are currently not
    # supported.
    [ "${#1}" = 1 ] || return 255

    # Save $IFS.
    _old_IFS="$IFS" 2> /dev/null
    ${IFS+':'} unset _old_IFS 2> /dev/null

    # Save the state of the pathname expansion flag and disable it if active;
    # disabled to disable the expansion of `*`.
    case "$-" in
        *'f'*) _pn=0 ;;
        *) _pn=1; set -f ;;
    esac

    # Field split $2 (string) based on $1 (character); the number of fields
    # produced (minus one, to account for the field split itself) corresponds
    # to the number of times the character has appeared. To enforce stable
    # field splitting behavior, $1 is placed at the end of the string,
    # ensuring the function's integrity.
    IFS="$1"; set -- $2"$IFS"; _count=$(($# - 1))

    # Restore the active state of the pathname expansion flag if appropriate.
    if [ "$_pn" = 1 ]; then
        set +f
    fi

    # Restore $IFS.
    IFS="$_old_IFS" 2> /dev/null
    ${_old_IFS+':'} unset IFS 2> /dev/null

    return 0
}
