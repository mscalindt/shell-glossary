#! .desc:
# Count the times character(s) appear in a string using IFS
#! .params:
# <"$1"> - character(s)
# ["$2"] - string
#! .uses.fn:
# <assert> ('-shell-whitespace' '$1');
#          Assert a string
#! .gives:
# (0) <$_count> - integer
#! .rc:
# (0) success
#! .rc.fn:
# (assert) (255) bad usage
#! .desc.ext:
# The specification of multi-byte characters or multiple characters is allowed,
# but the former results in undefined behavior, and the latter might be
# unstable, in respect to the locale and platform (shell interpreter);
# the result might therefore be incorrect.
#
# $1 cannot be <space>, <tab>, or <newline> (part of "IFS white space").
# If a character part of "IFS white space" is solely given as $1,
# error code `255` (bad usage) will be returned.
#
# Note that, according to POSIX.1-2024, it is implementation-defined whether
# any other, in addition to the specified characters, consist part of
# "IFS white space".
#
# For more information, refer to:
# > "POSIX.1-2024, Volume: Base Definitions,
#   Section: Directory Structure and Devices,
#   Subsection: Directory Structure and Files".
# > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell Command Language,
#   Subsection: Field Splitting".
# > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell Command Language,
#   Subsection: Pathname Expansion".
#.
ccount() {
    { ! assert -shell-whitespace "$1"; } || return 255

    # Save $IFS.
    _old_IFS="$IFS" 2> /dev/null
    ${IFS+':'} unset _old_IFS 2> /dev/null

    # Save the state of the pathname expansion flag and disable it if active;
    # disabled to disable the expansion of `*`.
    case "$-" in
        *'f'*) _pn=0 ;;
        *) _pn=1; set -f ;;
    esac

    # Field split $2 (string) based on $1 (character); the number of fields
    # produced (minus one, to account for the field split itself) corresponds
    # to the number of times the character has appeared. To enforce stable
    # field splitting behavior, $1 is placed at the end of the string,
    # ensuring the function's integrity.
    IFS="$1"; set -- $2"$IFS"; _count=$(($# - 1))

    # Restore the active state of the pathname expansion flag if appropriate.
    if [ "$_pn" = 1 ]; then
        set +f
    fi

    # Restore $IFS.
    IFS="$_old_IFS" 2> /dev/null
    ${_old_IFS+':'} unset IFS 2> /dev/null

    return 0
}
