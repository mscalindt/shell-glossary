#! .desc:
# Process each populated file line with a function
#! .params:
# <$1> - read_method(
#     '-' - read heredoc (stdin)
#     '-cat' - use `cat`
#     '-shell' - use shell input redirection
#     .
# )
# ["$2"] - file path
# <$3> - function name
# ["$4"]+ - function arguments
#! .uses:
# [&9]
# [()]
# [<<]
# [<]
#! .uses.util:
# [cat] ('--' '$2');
#       concatenate and print files
#! .rc:
# (0) success
# (*) error
# (255) bad input / bad usage / error
#! .rc.fn:
# ($3) (*) error
#! .rc.util
# (cat) (*) error
#! .desc.ext:
# For more information, refer to:
# > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell Command Language,
#   Subsection: Command Substitution".
# > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell Command Language,
#   Subsection: Here-Document".
#.
map_fline() {
    # Read the file with the specified method.
    #
    # Use `cat` to read the file if it is a potential specification of a file
    # in `/dev`, `/proc`, or `/sys` (kernel-created virtual file). Otherwise,
    # use the shell.
    case "$1" in
        '-')
            # Pass each populated line to $2 (the function).
            shift; while IFS= read -r _line || [ "$_line" ]; do
                [ "$_line" ] || continue
                "$@" "$_line" || return "$?"
            done
        ;;
        '-cat')
            [ -f "$2" ] || return 255

            # Store the output of `cat` in $_file using command substitution.
            # The custom `x` character at the end and its subsequent removal
            # outside the command substitution preserves any trailing <newline>
            # characters stripped by command substitution.
            _file=$(cat -- "$2" && printf "%s" 'x') || return "$?"
            _file="${_file%?}"

            # Iterate over each populated line of $_file using heredoc.
            shift 2; while IFS= read -r _line; do
                [ "$_line" ] || continue
                "$@" "$_line" || return "$?"
            done \
<<_FILE
$_file
_FILE
        ;;
        '-shell')
            [ -f "$2" ] || return 255

            # Open the file and assign it to file descriptor `9`. The usage of
            # a file descriptor simplifies the error handling. Additionally,
            # TOCTOU flaws are completely avoided this way.
            { exec 9< "$2"; } || return "$?"

            # Pass each populated line to $3 (the function). If an error is
            # received, file descriptor `9` will be released and the error
            # signaled.
            shift 2; while IFS= read -r _line <&9 || [ "$_line" ]; do
                [ "$_line" ] || continue
                "$@" "$_line" || { set -- "$?"; exec 9<&-; return "$1"; }
            done

            # Release file descriptor `9` to close the associated file.
            exec 9<&-
        ;;
        *)
            return 255
        ;;
    esac

    return 0
}
