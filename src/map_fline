#! .desc:
# Process each line of a file with a function
#! .params:
# <"$1"> - absolute file path
# <$2> - function name
#! .uses:
# <&9>
#! .rc:
# (0) success
# (*) error
# (255) bad input/usage
#! .rc.fn:
# ($2) (*) error
#.
map_fline() {
    # Assert $1 is a file.
    [ -f "$1" ] || return 255

    # Open the file specified by $1 and assign it to file descriptor `9`. The
    # usage of a file descriptor simplifies the error handling. Additionally,
    # TOCTOU flaws are completely avoided this way.
    { exec 9< "$1"; } || return "$?"

    # Pass each line individually to $1 (the function). If an error is
    # received, file descriptor `9` will be released and the error signaled.
    while IFS= read -r _line <&9 || [ "$_line" ]; do
        "$2" "$_line" || { set -- "$?"; exec 9<&-; return "$1"; }
    done

    # Release file descriptor `9` to close the associated file.
    exec 9<&-
}
