#! .desc:
# Process each line of a file with a function
#! .params:
# <"$1"> - absolute file path
# <$2> - function name
#! .uses:
# [&9]
#! .uses.util:
# [cat];
# concatenate and print files
#! .rc:
# (0) success
# (*) error
# (255) bad input / bad usage
#! .rc.fn:
# ($2) (*) error
#! .rc.util
# (cat) (*) error
#.
map_fline() {
    # Assert $1 is a file.
    [ -f "$1" ] || return 255

    # Use `cat` to read the file into $_line if $1 is a potential specification
    # of a file in `/dev`, `/proc`, or `/sys` (kernel-created virtual file).
    #
    # `cat` will read the file in one `read` syscall. This is important because
    # certain kernel files can only be read() once, returning EOF on subsequent
    # read() syscalls. This behavior is prevalent for certain files in `/proc`
    # which do not support seeking.
    #
    # `cat` reads a file in large chunks, accommodating the requirement for a
    # single read(). This contrasts with a POSIX shell, which reads files one
    # byte at a time and may only return the first byte of data from certain
    # kernel files.
    case "/$1" in
        *'/dev/'* | *'/proc/'* | *'/sys/'*)
            # Store the output of `cat` in $_line using command substitution.
            # The custom `x` character at the end and its subsequent removal
            # outside the command substitution preserves any trailing <newline>
            # characters stripped by command substitution.
            #
            # For more information, refer to:
            # > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell
            #   Command Language, Subsection: Command Substitution".
            _line=$(cat "$1" && printf "%s" 'x') || return "$?"
            _line="${_line%?}"

            # Iterate over the lines of $_line using heredoc.
            #
            # For more information, refer to:
            # > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell
            #   Command Language, Subsection: Here-Document".
            while IFS= read -r _line; do
                "$2" "$_line" || return "$?"
            done \
<<_LINE
$_line
_LINE
        ;;
    esac

    # Open the file specified by $1 and assign it to file descriptor `9`. The
    # usage of a file descriptor simplifies the error handling. Additionally,
    # TOCTOU flaws are completely avoided this way.
    { exec 9< "$1"; } || return "$?"

    # Pass each line individually to $1 (the function). If an error is
    # received, file descriptor `9` will be released and the error signaled.
    while IFS= read -r _line <&9 || [ "$_line" ]; do
        "$2" "$_line" || { set -- "$?"; exec 9<&-; return "$1"; }
    done

    # Release file descriptor `9` to close the associated file.
    exec 9<&-
}
