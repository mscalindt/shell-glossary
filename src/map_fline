#! .desc:
# Process each populated file line with a function
#! .params:
# <$1> - read_method(
#     '-' - read heredoc (stdin)
#     '-cat' - use `cat`
#     '-shell' - use shell input redirection
#     .
# )
# ["$2"] - file path
# <$3> - function name
# ["$4"]+ - function arguments
#! .uses:
# [&9]
# [<<]
# [<]
#! .uses.fn:
# [file_preload] ('-cat' '$2');
#                Read a file raw
#! .rc:
# (0) success
# (*) error
# (255) bad input / error
#! .rc.fn:
# ($3) (*) error
# (file_preload) (*) error
#! .desc.ext:
# Use `cat` to read the file if it is a potential specification of a file
# in `/dev`, `/proc`, or `/sys` (kernel-created virtual file). Otherwise,
# use the shell.
#
# For more information, refer to:
# > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell Command Language,
#   Subsection: exec".
# > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell Command Language,
#   Subsection: Here-Document".
# > "POSIX.1-2024, Volume: Shell & Utilities, Section: Utilities,
#   Utility: read".
#.
map_fline() {
    case "$1" in
        '-')
            # Consume stdin using `read`, passing each populated line
            # to the function ($2).
            shift; while IFS= read -r _line || [ "$_line" ]; do
                [ "$_line" ] || continue
                "$@" "$_line" || return "$?"
            done
        ;;
        '-cat')
            {
                file_preload -cat "$2" && \
                shift 2 && \
                map_fline - "$@" \
<<_
$_file
_
            } || return "$?"
        ;;
        '-shell')
            # Open the file and assign it to file descriptor `9`. The usage of
            # a file descriptor simplifies the error handling. Additionally,
            # TOCTOU flaws are completely avoided this way.
            { exec 9< "$2"; } || return "$?"

            shift 2 && \
            map_fline - "$@" <&9 || { set -- "$?"; exec 9<&-; return "$1"; }

            # Release file descriptor `9` to close the associated file.
            exec 9<&-
        ;;
        *)
            return 255
        ;;
    esac
}
