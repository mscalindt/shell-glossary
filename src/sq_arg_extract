#! .desc:
# Extract an evaluated argument in a single-quotes array of arguments
#! .params:
# <$1> - pattern
# <$2> - single-quotes array of arguments
# [$3] - pattern_type(
#     '-exact' - $1 is the literal argument
#     '-prefix' - $1 is the prefix of an argument
#     '-suffix' - $1 is the suffix of an argument
#     .
# )
#! .gives.var:
# (0) <_arg> - string;
#              evaluated argument
#! .rc:
# (0) success
# (1) argument does not exist
#! .ec:
# (255) input error
#.
sq_arg_extract() {
    [ "$1" ] || exit 255
    assert -single-quotes-array "$2" || exit 255

    # Extract the specified evaluated argument. The usage of `eval` here is
    # safe because $2 has been asserted as a strict single-quotes array of
    # arguments.
    case "$3" in
        '-exact')
            _pattern="$1"; eval set -- "$2"; for _arg in "$@"; do
                case "$_arg" in
                    "$_pattern") return 0 ;;
                esac
            done
        ;;
        '-prefix')
            _pattern="$1"; eval set -- "$2"; for _arg in "$@"; do
                case "$_arg" in
                    "$_pattern"*) return 0 ;;
                esac
            done
        ;;
        '-suffix')
            _pattern="$1"; eval set -- "$2"; for _arg in "$@"; do
                case "$_arg" in
                    *"$_pattern") return 0 ;;
                esac
            done
        ;;
        *)
            [ ! "$3" ] || exit 255

            _pattern="$1"; eval set -- "$2"; for _arg in "$@"; do
                case "$_arg" in
                    *"$_pattern"*) return 0 ;;
                esac
            done
        ;;
    esac

    return 1
}
