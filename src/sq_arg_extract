#! .desc:
# Extract a single-quoted argument in a single-quote-escaped string
#! .params:
# <"$1"> - token
# <"$2"> - single-quote-escaped string
# [$3] - match_type(
#     '-exact' - the token is a literal argument
#     '-prefix' - the token is a prefix
#     '-suffix' - the token is a suffix
#     .
# )
#! .gives:
# (0) <"$_arg"> - string;
#                 evaluated argument
#! .rc:
# (0) success
# (1) argument does not exist
# (255) bad input
#.
sq_arg_extract() {
    # Assert $2 is a valid single-quote-escaped string.
    _str="$2"; while :; do
        # Here, the position of $_str must always be outside the single quotes
        # of an argument. This marks a new iteration of the parsing logic for a
        # valid single-quote-escaped argument. Crucially, the first character
        # must be `'`.
        case "$_str" in
            \'*) _str="${_str#?}" ;;
            *) return 255 ;;
        esac

        # Here, the position of $_str is right inside the single-quote-escaped
        # argument. This marks a new iteration of the process of verification
        # that the next `'` is either:
        # - A properly escaped single quote inside single quotes.
        # - The end of an argument.
        #
        # The next `'` will be stripped and the subsequent pattern asserted.
        while [ "$_str" ]; do
            # For an escaped single quote, naturally, what follows as a pattern
            # is `\''`; it will be stripped, marking a new iteration of the
            # verification process.
            #
            # For the end of an argument, naturally, what follows is ` '`;
            # only `' ` will be stripped, marking a new iteration of the
            # parsing logic for a valid single-quote-escaped argument.
            #
            # For the end of the final argument, naturally, the strip results
            # in an empty string and therefore denotes the end of a valid
            # single-quote-escaped string.
            case "${_str#*\'}" in
                \\\'\'*) _str="${_str#*\'\\\'\'}"; continue ;;
                \ \'*) _str="${_str#*\'\ }"; continue 2 ;;
                '') break 2 ;;
                *) return 255 ;;
            esac
        done

        # Here, $_str has terminated abruptly: the parse position is beyond the
        # valid boundaries.
        return 255
    done

    # Extract the specified argument by matching the given token ($1) as a
    # pattern present anywhere in the argument, unless $3 (specific pattern
    # match) is specified.
    #
    # The usage of `eval` here is safe; arbitrary code execution is not
    # possible because $2 has been asserted as a strict single-quote-escaped
    # string and its nature (strings wrapped in single quotes) naturally
    # prevents code execution.
    case "$3" in
        '-exact')
            _token="$1"; eval set -- "$2"; while [ "$#" -ge 1 ]; do
                case "$1" in
                    "$_token") _arg="$1"; return 0 ;;
                    *) shift && continue ;;
                esac
            done
        ;;
        '-prefix')
            _token="$1"; eval set -- "$2"; while [ "$#" -ge 1 ]; do
                case "$1" in
                    "$_token"*) _arg="$1"; return 0 ;;
                    *) shift && continue ;;
                esac
            done
        ;;
        '-suffix')
            _token="$1"; eval set -- "$2"; while [ "$#" -ge 1 ]; do
                case "$1" in
                    *"$_token") _arg="$1"; return 0 ;;
                    *) shift && continue ;;
                esac
            done
        ;;
        *)
            _token="$1"; eval set -- "$2"; while [ "$#" -ge 1 ]; do
                case "$1" in
                    *"$_token"*) _arg="$1"; return 0 ;;
                    *) shift && continue ;;
                esac
            done
        ;;
    esac

    # No match.
    return 1
}
