#! .desc:
# Extract an evaluated argument in a single-quotes array of arguments
#! .params:
# <"$1"> - pattern
# <"$2"> - single-quotes array of arguments
# [$3] - pattern_type(
#     '-exact' - $1 is the literal argument
#     '-prefix' - $1 is the prefix of an argument
#     '-suffix' - $1 is the suffix of an argument
#     .
# )
#! .uses.fn:
# <assert> ('-single-quotes-array' '$2');
#          Assert a string
#! .gives:
# (0) <"$_arg"> - string;
#                 evaluated argument
#! .rc:
# (0) success
# (1) argument does not exist
#! .rc.fn:
# (assert) (255) bad input
#.
sq_arg_extract() {
    assert -single-quotes-array "$2" || return 255

    # Extract the specified evaluated argument. The usage of `eval` here is
    # safe because $2 has been asserted as a strict single-quotes array of
    # arguments.
    case "$3" in
        '-exact')
            _pattern="$1"; eval set -- "$2"; while [ "$#" -ge 1 ]; do
                case "$1" in
                    "$_pattern") _arg="$1"; return 0 ;;
                    *) shift && continue ;;
                esac
            done
        ;;
        '-prefix')
            _pattern="$1"; eval set -- "$2"; while [ "$#" -ge 1 ]; do
                case "$1" in
                    "$_pattern"*) _arg="$1"; return 0 ;;
                    *) shift && continue ;;
                esac
            done
        ;;
        '-suffix')
            _pattern="$1"; eval set -- "$2"; while [ "$#" -ge 1 ]; do
                case "$1" in
                    *"$_pattern") _arg="$1"; return 0 ;;
                    *) shift && continue ;;
                esac
            done
        ;;
        *)
            _pattern="$1"; eval set -- "$2"; while [ "$#" -ge 1 ]; do
                case "$1" in
                    *"$_pattern"*) _arg="$1"; return 0 ;;
                    *) shift && continue ;;
                esac
            done
        ;;
    esac

    return 1
}
