#! .desc:
# Convert N to that amount of a character
#! .params:
# <$1> - N
# <"$2"> - character
# [$3] - options(
#     '-wschars' - whitespace-separated characters
#     .
# )
#! .uses.fn:
# <assert> ('-whole-n' '$1');
#          Assert a string
#! .gives:
# (0) <"$_chars"> - string
#! .rc:
# (0) success
#! .rc.fn:
# (assert) (255) bad input
#.
num_to_char() {
    # Handle negative N ($1) gracefully: $_chars is set to an empty string and
    # success is returned.
    case "$1" in
        '-'[0123456789]*) _chars=; return 0 ;;
    esac

    assert -whole-n "$1" || return 255

    # Support `-wschars`. The added trailing whitespace character will be
    # removed after the function completes operation.
    case "$3" in
        '-wschars') set -- "$1" "$2 " "$3" ;;
    esac

    # Repeat the character ($2) N times ($1) to create the desired string.
    # When N is `0`, no characters are created, and $_chars is set to an empty
    # string. This helps in seamlessly integrating the function in cases where
    # character generation is not needed.
    _chars=; _i=0; until [ "$_i" -eq "$1" ]; do
        _chars="$_chars$2"; _i=$((_i + 1))
    done

    # Remove the trailing whitespace character used to support `-wschars`. The
    # option check is essential as to not accidentally remove a whitespace when
    # $2 (character) to be repeated is a literal whitespace.
    case "$3" in
        '-wschars') _chars="${_chars% }" ;;
    esac
}
