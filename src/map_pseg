#! .desc:
# Process each path segment with a function
#! .params:
# <"$1"> - path
# <$2> - function name
# ["$3"]+ - function arguments
#! .uses.fn:
# <path_spec_static> ('-cxy' '$1');
#                    Modify a path string
#! .sets:
# <map_pseg_> ();
#! .rc.fn:
# ($2) (0) success
# ($2) (*) error
# (path_spec_static) (*) error
#.
map_pseg() {
    map_pseg_() { _i="$2" && shift 2 && "$@" "$_i"; }

    # Remove consecutive and all trailing/leading slashes in $1 (path).
    path_spec_static -cxy "$1" || return "$?"  # -> $_path
    shift && set -- "$_path" '' "$@"

    # Process the path using parameter expansion. $1 is the original path
    # processed until nothing is left, while $2 will be the path segment(s).
    #
    # For more information, refer to:
    # > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell Command
    #   Language, Subsection: Parameter Expansion".
    while [ "$1" ]; do
        _i="$1"; shift 2; case "$_i" in
            *'/'*) set -- "${_i#*/}" "${_i%/"${_i#*/}"}" "$@" ;;
            *) set -- '' "$_i" "$@" ;;
        esac

        # Pass $2 (path segment) to $3 (function) as the last positional
        # parameter along any function arguments.
        map_pseg_ "$@" || return "$?"
    done

    return 0
}
