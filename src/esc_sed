#! .desc:
# Escape a string to be used literally as a POSIX `sed` string
#! .params:
# <$1> - sed_string_type(
#     '-RE'
#     '-replacement'
#     .
# )
# ["$2"] - delimiter character
# ["$3"] - string
#! .uses.fn:
# <replchar_posix> ("specific character" "character(s)" "string");
#                  Replace a specific character with character(s) in a string
#                  using PE
#! .gives:
# (0) <"$_str"> - [string];
#                 [modified <$3>]
#! .rc:
# (0) success
# (2) bad $2
# (255) bad input
#! .rc.fn:
# (replchar_posix) (*) error
#! .desc.ext:
# The delimiter character cannot be a <backslash> or a <newline> character.
#
# POSIX.1-2024 states:
# "Any character other than <backslash> or <newline> can be used instead of a
#  <slash> to delimit the RE and the replacement".
#
# For more information, refer to:
# > "POSIX.1-2024, Volume: Base Definitions, Section: Regular Expressions".
# > "POSIX.1-2024, Volume: Shell & Utilities, Section: Utilities,
#   Utility: sed".
#.
esc_sed() {
    # According to POSIX.1-2024, the delimiter cannot be a <backslash> or a
    # <newline> character.
    case "$2" in
        '\' | '
')
            return 2
        ;;
    esac

    # Escape all special characters for `sed` in the given string type
    # according to POSIX.1-2024. Since POSIX.1-2024, `sed -E` is specified,
    # therefore all ERE special characters will also be escaped.
    case "$1" in
        '-RE')
            # Escape RE special characters. The <backslash> is used to escape
            # other characters, therefore it must be escaped first.
            replchar_posix '\' '\\' "$3" || return "$?"
            replchar_posix '.' '\.' "$_str" || return "$?"
            replchar_posix '*' '\*' "$_str" || return "$?"
            replchar_posix '[' '\[' "$_str" || return "$?"
            replchar_posix ']' '\]' "$_str" || return "$?"
            replchar_posix '^' '\^' "$_str" || return "$?"
            replchar_posix '$' '\$' "$_str" || return "$?"
            replchar_posix '(' '\(' "$_str" || return "$?"
            replchar_posix ')' '\)' "$_str" || return "$?"
            replchar_posix '{' '\{' "$_str" || return "$?"
            replchar_posix '}' '\}' "$_str" || return "$?"
            replchar_posix '|' '\|' "$_str" || return "$?"
            replchar_posix '+' '\+' "$_str" || return "$?"
            replchar_posix '?' '\?' "$_str" || return "$?"
            replchar_posix '
' '\n' "$_str" || return "$?"

            # Escape `sed` specified delimiter character.
            replchar_posix "$2" '\'"$2" "$_str" || return "$?"
        ;;
        '-replacement')
            # Escape RE special characters. The <backslash> is used to escape
            # other characters, therefore it must be escaped first.
            replchar_posix '\' '\\' "$3" || return "$?"

            # Escape replacement string special characters.
            replchar_posix '&' '\&' "$_str" || return "$?"
            replchar_posix '
' '\n' "$_str" || return "$?"

            # Escape `sed` specified delimiter character.
            replchar_posix "$2" '\'"$2" "$_str" || return "$?"
        ;;
        *)
            return 255
        ;;
    esac

    return 0
}
