#! .desc:
# Check a bit, the power of 2, in a pseudo-bitmask shell variable
#! .params:
# <$1> - bit(
#     '0' - check if no bits are set
#     .
# )
# <$2> - variable name
#! .uses.fn:
# <assert> ("type" "string");
#          Assert a string
#! .rc:
# (0) true
# (1) false
#! .rc.fn:
# (assert) (255) bad input/usage
#.
mask_check() {
    # Remove `0x` from $1 (bit) if present.
    set -- "${1#0x}" "$2"

    # Handle value `0` for $1 (bit) specially: check if no bits are set.
    case "$1" in
        '0')
            assert -shell-name "$2" || return 255

            # Safely evaluate $2 (variable name) into its literal content.
            eval set -- "$1" "\$$2"

            assert -whole-n "$2" || return 255

            # Assert whether $2 (bitmask) is `0`, i.e. no bits are set.
            [ "$2" = 0 ] && return 0 || return 1
        ;;
    esac

    assert -bit "$1" || return 255
    assert -shell-name "$2" || return 255

    # Safely evaluate $2 (variable name) into its literal content.
    eval set -- "$1" "\$$2"

    assert -whole-n "$2" || return 255

    # Assert whether $1 (bit) is set in $2 (bitmask).
    [ "$(($1 & $2))" = "$1" ]
}
