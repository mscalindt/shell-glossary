#! .desc:
# Check a bit, the power of 2, in a pseudo-bitmask shell variable
#! .params:
# <$1> - bit
# <$2> - variable name
#! .uses:
# <assert> ("type" "string");
#          Assert a string
#! .rc:
# (0) true
# (1) false
# (255) bad input/usage
#.
mask_check() {
    # Remove `0x` from $1 (bit) if present.
    set -- "${1#0x}" "$2"

    # Assert $1 is a natural number and a valid bit.
    assert -bit "$1" || return 255

    # Assert $2 is a valid shell variable name.
    assert -shell-name "$2" || return 255

    # Safely evaluate $2 (variable name) into its literal content.
    eval set -- "$1" "\$$2"

    # Assert the variable expanded to a whole number.
    assert -whole-n "$2" || return 255

    # Assert whether $1 (the specified bit) is set in $2 (the bitmask).
    [ "$(($1 & $2))" -eq "$1" ]
}
