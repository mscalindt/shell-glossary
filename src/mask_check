#! .desc:
# Assert a bit, the power of 2, in a pseudo-bitmask shell variable
#! .params:
# <$1> - bit(
#     '0' - assert no bits are set
#     .
# )
# <$2> - variable name
#! .rc:
# (0) true
# (1) false
# (*) error
#! .ec:
# (255) input error
#.
mask_check() {
    # Remove `0x` from $1 (bit) if present.
    set -- "${1#0x}" "$2"

    { assert -eq "$1" 0 || assert -bit "$1"; } || exit 255

    assert -shell-name "$2" && \
    eval set -- "$1" "\$$2" && \
    assert -whole-n "$2" || exit 255

    # Handle value `0` specially by asserting no bits are set.
    case "$1" in
        '0') [ "$2" = 0 ] ;;
        *) [ "$(($1 & $2))" = "$1" ] ;;
    esac
}
