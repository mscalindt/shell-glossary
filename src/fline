#! .desc:
# Get a specific line in a file
#! .params:
# <$1> - read_method(
#     '-cat' - use `cat`
#     '-shell' - use shell input redirection
#     .
# )
# <$2> - line number
# <"$3"> - file path
#! .uses:
# [&9]
# [<]
#! .uses.fn:
# <assert> ('-natural-n' '$2');
#          Assert a string
# [file_preload] ('-cat' '$3');
#                Read a file raw
# [sline] ('$_file' '$2');
#         Get a specific line in a string
#! .gives:
# (0) <"$_line"> - [string];
#                  specified line of $3
#! .rc:
# (0) success
# (1) line does not exist / error
# (*) error
# (255) bad input / error
#! .rc.fn:
# (assert) (255) bad input
# (file_preload) (*) error
# (sline) (*) error
#! .desc.ext:
# Use `-cat` to read the file if it is a potential specification of a file
# in `/dev`, `/proc`, or `/sys` (kernel-created virtual file). Otherwise,
# use the shell.
#
# For more information, refer to:
# > "POSIX.1-2024, Volume: Base Definitions, Section: Definitions,
#   Subsection: File Descriptor".
# > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell Command Language,
#   Subsection: Duplicating an Input File Descriptor".
# > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell Command Language,
#   Subsection: exec".
# > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell Command Language,
#   Subsection: Redirecting Input".
# > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell Command Language,
#   Subsection: Redirection".
# > "POSIX.1-2024, Volume: Shell & Utilities, Section: Utilities,
#   Utility: read".
#.
fline() {
    assert -natural-n "$2" || return 255

    case "$1" in
        '-cat')
            file_preload -cat "$3" && sline "$_file" "$2" && return 0
        ;;
        '-shell')
            # Open the file and assign it to file descriptor `9`. The usage of
            # a file descriptor simplifies the error handling. Additionally,
            # TOCTOU flaws are completely avoided this way.
            { exec 9< "$3"; } || return "$?"

            _i=1; while IFS= read -r _line; do
                case "$_i" in "$2") exec 9<&-; return 0 ;; esac
                _i=$((_i + 1))
            done <&9

            # Release file descriptor `9` to close the associated file.
            exec 9<&-

            # Manually handle the last `read` call if the file
            # does not end with a <newline>.
            case "$_i" in "$2") return 0 ;; esac
        ;;
        *)
            return 255
        ;;
    esac

    return 1
}
