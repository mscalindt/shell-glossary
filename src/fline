#! .desc:
# Get a specific line in a file
#! .params:
# <$1> - line number
# <"$2"> - absolute file path
#! .uses:
# <&9>
#! .uses.fn:
# <assert> ('-natural-n' '$1');
#          Assert a string
#! .gives:
# (0) <"$_line"> - string
#! .rc:
# (0) success
# (1) line does not exist
# (255) bad usage
#! .rc.fn:
# (assert) (255) bad input
#! .caveats:
# > Reading /proc is unreliable.
#.
fline() {
    assert -natural-n "$1" || return 255

    # Assert $2 exists and is a file.
    [ -f "$2" ] || return 255

    # Open the file specified by $2 and assign it to file descriptor `9`. The
    # usage of a file descriptor simplifies the error handling. Additionally,
    # TOCTOU flaws are completely avoided this way.
    { exec 9< "$2"; } || return 255

    # Read the file, counting the lines; if we land on the specified one,
    # release file descriptor `9` and signal it.
    _i=1; while IFS= read -r _line <&9 || [ "$_line" ]; do
        [ "$_i" -ne "$1" ] || { exec 9<&-; return 0; }

        _i=$((_i + 1))
    done

    # Release file descriptor `9` to close the associated file and signal the
    # specified line doesn't exist.
    exec 9<&-; return 1
}
