#! .desc:
# Get a specific line in a file
#! .params:
# <$1> - read_method(
#     '-cat' - use `cat`
#     '-shell' - use shell input redirection
#     .
# )
# <$2> - line number
# <"$3"> - file path
#! .uses:
# [&9]
#! .uses.fn:
# <assert> ('-natural-n' '$2');
#          Assert a string
#! .uses.util:
# [cat];
# concatenate and print files
#! .gives:
# (0) <"$_line"> - [string]
#! .rc:
# (0) success
# (1) line does not exist / error
# (*) error
# (255) bad usage / error
#! .rc.fn:
# (assert) (255) bad input
#! .rc.util
# (cat) (*) error
#! .caveats:
# > `INT_MAX`.
#.
fline() {
    assert -natural-n "$2" || return 255

    # Assert $3 exists and is a file.
    [ -f "$3" ] || return 255

    # Read the file with the specified method.
    #
    # Use `cat` to read the file if it is a potential specification of a file
    # in `/dev`, `/proc`, or `/sys` (kernel-created virtual file).
    #
    # `cat` will read the file in one `read` syscall. This is important because
    # certain kernel files can only be read() once, returning EOF on subsequent
    # read() syscalls. This behavior is prevalent for certain files in `/proc`
    # which do not support seeking.
    #
    # `cat` reads a file in large chunks, accommodating the requirement for a
    # single read(). This contrasts with a POSIX shell, which reads files one
    # byte at a time and may only return the first byte of data from certain
    # kernel files.
    #
    # Use the shell to read the file if it is a small (< ~10000XX lines),
    # user-created file.
    case "$1" in
        '-cat')
            # Store the output of `cat` in $_file using command substitution.
            # The custom `x` character at the end and its subsequent removal
            # outside the command substitution preserves any trailing <newline>
            # characters stripped by command substitution.
            #
            # For more information, refer to:
            # > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell
            #   Command Language, Subsection: Command Substitution".
            _file=$(cat -- "$3" && printf "%s" 'x') || return "$?"
            _file="${_file%?}"

            # Iterate over each line of $_file using heredoc.
            #
            # For more information, refer to:
            # > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell
            #   Command Language, Subsection: Here-Document".
            _i=1; while IFS= read -r _line; do
                case "$_i" in "$2") return 0 ;; esac
                _i=$((_i + 1))
            done \
<<_LINE
$_file
_LINE
        ;;
        '-shell')
            # Open the file and assign it to file descriptor `9`. The usage of
            # a file descriptor simplifies the error handling. Additionally,
            # TOCTOU flaws are completely avoided this way.
            { exec 9< "$3"; } || return "$?"

            # Read the file, counting the lines; if we land on the specified
            # one, release file descriptor `9` and signal it.
            _i=1; while IFS= read -r _line <&9; do
                case "$_i" in "$2") exec 9<&-; return "$?" ;; esac
                _i=$((_i + 1))
            done; case "$_i" in "$2") exec 9<&-; return "$?" ;; esac

            # Release file descriptor `9` to close the associated file.
            exec 9<&-
        ;;
        *)
            return 255
        ;;
    esac

    # Signal the specified line doesn't exist.
    return 1
}
