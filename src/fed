#! .desc:
# Create a deterministic file data edit format
#! .params:
# <[$1]> - file content
# <$2>+ - operation(
#     '-' - EOF add $3
#     '-m' - apply modifier for `-a`/`-r`/`-s`; see extended description
#     '-a' - add $3
#     '-r' - remove $3
#     '-s' - substitute $3 with $4
#     .
# )
# [$3] - string
# [$4] - string
#! .gives.var:
# (0) <_fmt> - [string];
#              shell-parseable evaluable line-sorted operations list
#! .sets:
# <fed_> ();
#! .rc:
# (0) success
# (*) error
#! .ec:
# (255) input error
#! .desc.ext:
# The format of created operations is as follows (N - natural number):
# `-a N X`, means at "N" line add "X" data;
# `-r N`,   means remove "N" line;
# `-s N X`, means substitute "N" line with "X" data.
#
# Created operations are line-sorted and FIFO.
# Created EOF operations are specified after all line operations.
#
# FIFO operations take precedence over any additional operations.
# Without modifiers, the default modification behavior is "line of".
# The modifiers are stackable, but may override same-type incompatibility.
#
# $3 cannot be a multiline string, except for `-` and `-a`.
#
# Option `-m` offers the following primary type (conditional) modifier(s):
# ``;
# the following secondary type (modification behavior) modifier(s):
# <n>:           a natural number that specifies a line;
# `mof`:         substitution modification behavior is "match of";
# and the following tertiary type (string matching behavior) modifier(s):
# `e`:           exact string matching assert;
# `p`:           prefix string matching assert;
# `s`:           suffix string matching assert.
#.
fed() {
    fed_() {
        _line="$1"
        _orig_offset="$2"
        shift 2

        # Test all operations against the current line in FIFO manner.
        while [ "$#" -ge 1 ]; do
            _mod_p=; _mod_s=; _mod_t=

            # Set modifiers.
            # `mof` -> `m` in $_mod_s
            # <n> -> "<n>" in $_mod_s
            # `e` -> `e` in $_mod_t
            # `p` -> `p` in $_mod_t
            # `s` -> `s` in $_mod_t
            while :; do case "$1 $2" in
                '-m mof')
                    _mod_s="m ${_mod_s#'m '}"; shift 2 && continue
                ;;
                '-m e')
                    _mod_t=e; shift 2 && continue
                ;;
                '-m p')
                    _mod_t=p; shift 2 && continue
                ;;
                '-m s')
                    _mod_t=s; shift 2 && continue
                ;;
                '-m '*)
                    # Assert $2 is a natural number (`1`, `2`, ...).
                    case "${2:-0}${2#*[!0123456789]}" in
                        0*) exit 255 ;;
                        "$2$2") _mod_s="$_mod_s $2 "; shift 2 && continue ;;
                        *) exit 255 ;;
                    esac
                ;;
                *)
                    break
                ;;
            esac done

            case "$1" in
                '-')
                    case "$#" in 1) exit 255 ;; esac

                    shift 2 && continue
                ;;
                '-a')  # $2 = string
                    case "$#" in 1) exit 255 ;; esac
                    case "$_mod_s" in 'm '*) exit 255 ;; esac

                    # Test <n> modifier.
                    case "${_mod_s:-0}" in
                        *" $_orig_offset "*)
                            set -- '-a' "$2" "$_orig_offset"
                        ;;
                        0)
                            # Assert addition <noop>; is a valid operation,
                            # hence is the line regarded as parsed.
                            [ "$2" ] || return 0

                            set -- '-s' "$_line$2" "$_orig_offset"
                        ;;
                        *)  # Operation <noop>.
                            shift 2 && continue
                        ;;
                    esac

                    arg_set _a "$2" || return "$?"

                    # $3 = orig_offset
                    printf "%s" " '$1' '$3' $_a"

                    return 0
                ;;
                '-r')  # $2 = string
                    case "$#" in 1) exit 255 ;; esac
                    case "$_mod_s" in 'm '*) exit 255 ;; esac

                    # Assert <n> modifier.
                    case "${_mod_s:-0}" in
                        *" $_orig_offset "* | 0) : ;;
                        *) shift 2 && continue ;;  # Operation <noop>.
                    esac

                    # Test `e`/`p`/`s` string matching modifiers.
                    case "$_mod_t" in
                        e)
                            case "$_line" in
                                "$2") : ;;
                                *) shift 2 && continue ;;
                            esac
                        ;;
                        p)
                            case "$_line" in
                                "$2"*) : ;;
                                *) shift 2 && continue ;;
                            esac
                        ;;
                        s)
                            case "$_line" in
                                *"$2") : ;;
                                *) shift 2 && continue ;;
                            esac
                        ;;
                        *)
                            # Test default string match.
                            case "$_line" in
                                *"$2"*) : ;;
                                *) shift 2 && continue ;;
                            esac
                        ;;
                    esac

                    printf "%s" " '-r' '$_orig_offset'"

                    return 0
                ;;
                '-s')  # $2 = string; $3 = string
                    case "$#" in 1|2) exit 255 ;; esac

                    # Assert <n> modifier.
                    case "${_mod_s:-m }" in
                        *" $_orig_offset "* | 'm '*) : ;;
                        *) shift 3 && continue ;;  # Operation <noop>.
                    esac

                    # Test `mof` (`m`) modifier.
                    case "$_mod_s" in
                        'm '*)
                            # Assert operation <noop>.
                            [ "$2" ] || { shift 3 && continue; }

                            case "$_line" in
                                *"$2"*)
                                    _a="$2"; _b="$3"; shift 3
                                    _b="${_line%%"$_a"*}$_b${_line#*"$_a"}"
                                    set -- '' "$_a" "$_b" "$@"
                                ;;
                            esac
                        ;;
                    esac

                    # Test `e`/`p`/`s` string matching modifiers.
                    # Asserts addition <noop>; is a valid operation,
                    # hence is the line regarded as parsed.
                    case "$_mod_t" in
                        e)
                            case "$_line" in
                                "$3") return 0 ;;  # Addition <noop>.
                                "$2") : ;;
                                *) shift 3 && continue ;;
                            esac
                        ;;
                        p)
                            case "$_line" in
                                "$3") return 0 ;;  # Addition <noop>.
                                "$2"*) : ;;
                                *) shift 3 && continue ;;
                            esac
                        ;;
                        s)
                            case "$_line" in
                                "$3") return 0 ;;  # Addition <noop>.
                                *"$2") : ;;
                                *) shift 3 && continue ;;
                            esac
                        ;;
                        *)
                            # Test default string match.
                            case "$_line" in
                                "$3") return 0 ;;  # Addition <noop>.
                                *"$2"*) : ;;
                                *) shift 3 && continue ;;
                            esac
                        ;;
                    esac

                    set -- '' '' "$3" "$_orig_offset"

                    arg_set _a "$3" || return "$?"

                    # $4 = orig_offset
                    printf "%s" " '-s' '$4' $_a"

                    return 0
                ;;
                *)
                    exit 255
                ;;
            esac
        done
    }

    [ "$#" -ge 3 ] || exit 255

    # Save the file content into $_str.
    #
    # The current positional parameters become:
    # $1  = orig_offset
    # ... = "$@" (operations)
    _str="$1"; shift; set -- 1 "$@"

    # Store the output of `printf` in $_fmt using command substitution.
    _fmt=$(
        while IFS= read -r _line; do
            fed_ "$_line" "$@" || return "$?"

            # $1 = orig_offset
            _a="$1" && shift 1
            set -- "$((_a + 1))" "$@"
        done \
<<EOF
$_str
EOF

        # Discard orig_offset.
        shift

        # Parse EOF operations.
        while [ "$#" -ge 1 ]; do
            case "$1" in
                '-') : ;;
                '-m' | '-a' | '-r') shift 2 && continue ;;
                '-s') shift 3 && continue ;;
                *) exit 255 ;;
            esac

            arg_set _a "$2" || return "$?"

            printf "%s" " '-' $_a"

            shift 2
        done
    )
}
