#! .desc:
# Strip a path N segments RTL
#! .params:
# [$1] - path
# [$2] - N
# [$3] - options(
#     '-floor' - cannot strip the last path segment remaining
#     '-posix' - cannot return an empty path (will return: `/`)
#     .
# )
#! .uses.fn:
# <assert> ('-whole-n' '$2');
#          Assert a string
#! .gives:
# (0) <_path> $ - [string];
#                 [modified <$1>]
#! .rc:
# (0) success
# (*) error
# (255) bad input / error
#! .rc.fn:
# (assert) (255) bad input
#! .desc.ext:
# For more information, refer to:
# > "POSIX.1-2024, Volume: Base Definitions, Section: General Concepts,
#   Subsection: Pathname Resolution".
#.
path_strip() {
    set -- "$1" "${2:-0}" "$3"

    assert -whole-n "$2" || return 255

    while [ "$2" -ge 1 ]; do
        # Strip any trailing slashes in the path, strip the last path segment,
        # strip the last path segment's leading slashes if any, and save the
        # result into $_a. The order of operation matters.
        _a="$1"
        _a="${_a%"${_a##*[!/]}"}"
        _a="${_a%"${_a##*/}"}"
        _a="${_a%"${_a##*[!/]}"}"

        # Handle the last path segment.
        [ "$_a" ] || break

        set -- "$_a" "$(($2 - 1))" "$3"
    done

    # `-floor`: Keep the path segment.
    # `-posix`: Strip to root (`/`).
    _path="$1"; case "$3" in
        '-floor') : ;;
        '-posix') [ "$2" = 0 ] || _path=/ ;;
        *) [ ! "$3" ] || return 255; [ "$2" = 0 ] || _path= ;;
    esac
}
