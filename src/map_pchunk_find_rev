#! .desc:
# Find success among cumulative path segments in reverse using a function;
# `/foo/bar/baz`: `/foo/bar/baz`, `/foo/bar`, `/foo`
# `/foo/bar/baz/`: `/foo/bar/baz/`, `/foo/bar`, `/foo`
# `foo/bar/baz`: `foo/bar/baz`, `foo/bar`, `foo`
# `foo/bar/baz/`: `foo/bar/baz/`, `foo/bar`, `foo`
#! .params:
# <"$1"> - path
# <$2> - function name
# ["$3"+] - function arguments
#! .uses.fn:
# <path_spec_static> ('-c' '$1');
#                    Modify a path string
#! .gives:
# (0) <"$_segment"> - string
#! .sets:
# <map_pchunk_find_rev_> ();
#! .rc:
# (0) success
# (*) false / error
#! .rc.fn:
# ($2) (0) success
# ($2) (1) false / error
# (path_spec_static) (*) error
#.
map_pchunk_find_rev() {
    map_pchunk_find_rev_() { _i="$1" && shift && "$@" "$_i"; }

    # Remove consecutive slashes in $1 (path).
    path_spec_static -c "$1" || return "$?"  # -> $_path
    shift && set -- "$_path" "$@"

    # Process the path using parameter expansion.
    #
    # For more information, refer to:
    # > "POSIX.1-2024, Volume: Shell & Utilities, Section: Shell Command
    #   Language, Subsection: Parameter Expansion".
    while [ "${1%/}" ]; do
        # Pass $1 (cumulative path segment) to $2 (function) as the last
        # positional parameter along any function arguments.
        map_pchunk_find_rev_ "$@" && { _segment="$1"; return 0; } || :

        _i="$1"; shift; case "$_i" in
            */) set -- "${_i%/*/}" "$@" ;;
            */*) set -- "${_i%/*}" "$@" ;;
            *) set -- '' "$@" ;;
        esac
    done

    return 1
}
