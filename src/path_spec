#! .desc:
# Mangle and assert a path in a specified way
#! .params:
# <$1> - options(
#     '-assert' - assert dir/file
#     '-join' - join the two paths
#     '-join-assert' - join the two paths and assert dir/file
#     .
# )
# <"$2"> - absolute path
# ["$3"] - join path
#! .gives:
# (0) <"$_path"> - string;
#                  [modified <$2>]
#! .rc:
# (0) success
# (255) bad input
#.
path_spec() {
    # Assert $2 is an absolute path.
    [ "$2" != "${2#/}" ] || return 255

    # Bail out on absurd paths.
    case "$2$3" in
        *'///'*) return 255 ;;
    esac

    # Prepare the paths being asserted/joined.
    set -- "$1" "${2%/}" "${3#/}"

    # Remove artifact joins or assertivity from $2.
    while :; do case "$2" in
        *'//'*) set -- "$1" "${2%'//'*}/${2#*'//'}" "$3" ;;
        *) break ;;
    esac done

    # Remove artifact joins or assertivity from $3.
    while :; do case "$3" in
        *'//'*) set -- "$1" "$2" "${3%'//'*}/${3#*'//'}" ;;
        *) break ;;
    esac done

    # Save the asserted/joined path into $_path.
    case "$1" in
        '-assert') _path="$2" ;;
        '-join' | '-join-assert') _path="$2/$3" ;;
    esac

    # Assert the type of path in $_path.
    case "$1" in
        '-assert' | '-join-assert')
            if [ -d "$_path" ]; then
                _path="$_path/"
            fi
        ;;
    esac
}
