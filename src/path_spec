#! .desc:
# Normalize a path into an assertable path specification
#! .params:
# <"$1"> - absolute path
# ["$2"] - join path
#! .uses:
# <assert> ('-absolute-path' '$1');
#          Assert a string
#! .gives:
# (0) <"$_path"> - string;
#                  [modified <$2>]
#! .rc:
# (0) success
# (1) bad path result
# (255) bad input
#.
path_spec() {
    # Assert $1 is an absolute path.
    assert -absolute-path "$1" || return 255

    # If given, fuse $2 (join path) into $1.
    set -- "$1/$2"

    # Save $IFS.
    _old_IFS="$IFS" 2> /dev/null
    ${IFS+':'} unset _old_IFS 2> /dev/null

    # Save the state of the pathname expansion flag and disable it if active;
    # disabled to disable the expansion of `*`.
    case "$-" in
        *'f'*) _pn=0 ;;
        *) _pn=1; set -f ;;
    esac

    # Word split the path ($1) based on `/`. Note that the following code
    # snippet is not usable outside of this function's context due to a quirk
    # in word splitting.
    IFS='/'; set -- $1

    # Restore the active state of the pathname expansion flag if appropriate.
    if [ "$_pn" = 1 ]; then
        set +f
    fi

    # Restore $IFS.
    IFS="$_old_IFS" 2> /dev/null
    ${_old_IFS+':'} unset IFS 2> /dev/null

    # Build a normalized and assertable path according to the split chunks.
    _path=; for _segment in "$@"; do
        # Assert $_segment is an actual chunk of the path (non-empty argument);
        # empty arguments can be produced if the path contains a pattern of
        # consecutive forward slashes.
        [ "$_segment" ] || continue

        # Resolve the path.
        # `.` -- the special directory name for the current directory.
        # `..` -- the special directory name for the parent directory.
        case "$_segment" in
            '.') continue ;;
            '..') _path="${_path%/*}" ;;
            *) _path="$_path/$_segment" ;;
        esac

        # Assert the path result is valid. Paths that attempt to resolve above
        # their root are intentionally rejected.
        [ "$_path" ] || return 1
    done

    # If $_path is resolved to a directory, add a trailing slash to align it
    # with the directory path specification.
    if [ ! -h "$_path" ] && [ -d "$_path" ]; then
        _path="$_path/"
    fi
}
